{"/home/travis/build/npmtest/node-npmtest-nwb/test.js":"/* istanbul instrument in package npmtest_nwb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nwb/lib.npmtest_nwb.js":"/* istanbul instrument in package npmtest_nwb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nwb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nwb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nwb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nwb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nwb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nwb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nwb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_nwb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nwb.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_nwb.__dirname +\n                    '/lib.npmtest_nwb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/babel-presets/inferno.js":"module.exports = {\n  plugins: [\n    require('babel-plugin-syntax-jsx'),\n    require('babel-plugin-inferno')\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/babel-presets/preact.js":"module.exports = {\n  plugins: [\n    [require('babel-plugin-transform-react-jsx'), {pragma: 'h'}]\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/babel-presets/react-hmre.js":"module.exports = {\n  plugins: [\n    [require('babel-plugin-react-transform').default, {\n      transforms: [\n        {\n          transform: require.resolve('react-transform-hmr'),\n          imports: ['react'],\n          locals: ['module']\n        },\n        {\n          transform: require.resolve('react-transform-catch-errors'),\n          imports: ['react', require.resolve('redbox-noreact')]\n        }\n      ]\n    }]\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/babel-presets/react-prod.js":"module.exports = {\n  plugins: [\n    require('babel-plugin-transform-react-remove-prop-types').default\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/express.js":"module.exports = require('./lib/expressMiddleware')\n","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/expressMiddleware.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = nwbMiddleware;\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _webpack = require('webpack');\n\nvar _webpack2 = _interopRequireDefault(_webpack);\n\nvar _constants = require('./constants');\n\nvar _createServerWebpackConfig = require('./createServerWebpackConfig');\n\nvar _createServerWebpackConfig2 = _interopRequireDefault(_createServerWebpackConfig);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _getUserConfig = require('./getUserConfig');\n\nvar _getUserConfig2 = _interopRequireDefault(_getUserConfig);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SERVE_APP_CONFIG = {\n  [_constants.INFERNO_APP]: './createServeInfernoAppConfig',\n  [_constants.PREACT_APP]: './createServePreactAppConfig',\n  [_constants.REACT_APP]: './createServeReactAppConfig',\n  [_constants.WEB_APP]: './createServeWebAppConfig'\n};\n\n/**\n * Express middleware for serving an app with hot reloading - equivalent to\n * having run `nwb serve`, but from your own server.\n */\nfunction nwbMiddleware(express) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  (0, _assert2.default)(express && typeof express.Router === 'function', 'The express module must be passed as the first argument to nwb middleware');\n\n  // We need to do an intial grab of the user config to determine the project\n  // type.\n  var userConfig = (0, _getUserConfig2.default)({ _: ['serve'], config: options.config }, { required: true });\n  if (!SERVE_APP_CONFIG[userConfig.type]) {\n    throw new Error(`nwb Express middleware is unable to serve anything for a ${userConfig.type} project.`);\n  }\n\n  var createServeAppConfig = require(SERVE_APP_CONFIG[userConfig.type]);\n\n  // Use options to create an object equivalent to CLI args parsed by minimist\n  var args = {\n    _: [`serve-${userConfig.type}`, options.entry],\n    config: options.config,\n    install: !!options.install || !!options.autoInstall,\n    reload: !!options.reload\n  };\n\n  var webpackConfig = (0, _createServerWebpackConfig2.default)(args, createServeAppConfig(args, {\n    plugins: {\n      status: {\n        middleware: true\n      }\n    }\n  }));\n\n  (0, _debug2.default)('webpack config: %s', (0, _utils.deepToString)(webpackConfig));\n\n  var compiler = (0, _webpack2.default)(webpackConfig);\n\n  var router = express.Router();\n\n  router.use(require('webpack-dev-middleware')(compiler, {\n    noInfo: true,\n    publicPath: webpackConfig.output.publicPath,\n    quiet: true,\n    watchOptions: {\n      ignored: /node_modules/\n    }\n  }));\n\n  router.use(require('webpack-hot-middleware')(compiler, {\n    log: false\n  }));\n\n  return router;\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/constants.js":"'use strict';\n\nexports.__esModule = true;\nvar CONFIG_FILE_NAME = exports.CONFIG_FILE_NAME = 'nwb.config.js';\n\nvar DEFAULT_PORT = exports.DEFAULT_PORT = process.env.PORT || 3000;\n\nvar INFERNO_APP = exports.INFERNO_APP = 'inferno-app';\nvar PREACT_APP = exports.PREACT_APP = 'preact-app';\nvar REACT_APP = exports.REACT_APP = 'react-app';\nvar REACT_COMPONENT = exports.REACT_COMPONENT = 'react-component';\nvar WEB_APP = exports.WEB_APP = 'web-app';\nvar WEB_MODULE = exports.WEB_MODULE = 'web-module';\n\nvar PROJECT_TYPES = exports.PROJECT_TYPES = new Set([INFERNO_APP, PREACT_APP, REACT_APP, REACT_COMPONENT, WEB_APP, WEB_MODULE]);","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createServerWebpackConfig.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createServerWebpackConfig;\n\nvar _createWebpackConfig = require('./createWebpackConfig');\n\nvar _createWebpackConfig2 = _interopRequireDefault(_createWebpackConfig);\n\nvar _getPluginConfig = require('./getPluginConfig');\n\nvar _getPluginConfig2 = _interopRequireDefault(_getPluginConfig);\n\nvar _getUserConfig = require('./getUserConfig');\n\nvar _getUserConfig2 = _interopRequireDefault(_getUserConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\n/**\n * Creates the final Webpack config for serving a web app with hot reloading,\n * using build and user configuration.\n */\nfunction createServerWebpackConfig(args, buildConfig) {\n  var userConfig = (0, _getUserConfig2.default)(args);\n  var pluginConfig = (0, _getPluginConfig2.default)({ args });\n\n  var entry = buildConfig.entry,\n      output = buildConfig.output,\n      _buildConfig$plugins = buildConfig.plugins,\n      plugins = _buildConfig$plugins === undefined ? {} : _buildConfig$plugins,\n      otherBuildConfig = _objectWithoutProperties(buildConfig, ['entry', 'output', 'plugins']);\n\n  var hotMiddlewareOptions = args.reload ? '?reload=true' : '';\n\n  if (args['auto-install'] || args.install) {\n    plugins.autoInstall = true;\n  }\n\n  return (0, _createWebpackConfig2.default)(_extends({\n    server: true,\n    devtool: 'cheap-module-source-map',\n    entry: [\n    // Polyfill EventSource for IE, as webpack-hot-middleware/client uses it\n    require.resolve('eventsource-polyfill'), require.resolve('webpack-hot-middleware/client') + hotMiddlewareOptions].concat(entry),\n    output,\n    plugins\n  }, otherBuildConfig), pluginConfig, userConfig);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createWebpackConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.COMPAT_CONFIGS = exports.styleRuleName = exports.ruleConfigFactory = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // XXX Temporary\n// XXX Temporary\n\n\nexports.mergeRuleConfig = mergeRuleConfig;\nexports.createStyleLoaders = createStyleLoaders;\nexports.createRules = createRules;\nexports.createExtraRules = createExtraRules;\nexports.createPlugins = createPlugins;\nexports.getCompatConfig = getCompatConfig;\nexports.default = createWebpackConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _autoprefixer = require('autoprefixer');\n\nvar _autoprefixer2 = _interopRequireDefault(_autoprefixer);\n\nvar _caseSensitivePathsWebpackPlugin = require('case-sensitive-paths-webpack-plugin');\n\nvar _caseSensitivePathsWebpackPlugin2 = _interopRequireDefault(_caseSensitivePathsWebpackPlugin);\n\nvar _copyWebpackPlugin = require('copy-webpack-plugin');\n\nvar _copyWebpackPlugin2 = _interopRequireDefault(_copyWebpackPlugin);\n\nvar _extractTextWebpackPlugin = require('@insin/extract-text-webpack-plugin');\n\nvar _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);\n\nvar _htmlWebpackPlugin = require('html-webpack-plugin');\n\nvar _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);\n\nvar _npmInstallWebpackPlugin = require('@insin/npm-install-webpack-plugin');\n\nvar _npmInstallWebpackPlugin2 = _interopRequireDefault(_npmInstallWebpackPlugin);\n\nvar _webpack = require('webpack');\n\nvar _webpack2 = _interopRequireDefault(_webpack);\n\nvar _webpackMd5Hash = require('webpack-md5-hash');\n\nvar _webpackMd5Hash2 = _interopRequireDefault(_webpackMd5Hash);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _createBabelConfig = require('./createBabelConfig');\n\nvar _createBabelConfig2 = _interopRequireDefault(_createBabelConfig);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _utils = require('./utils');\n\nvar _WebpackStatusPlugin = require('./WebpackStatusPlugin');\n\nvar _WebpackStatusPlugin2 = _interopRequireDefault(_WebpackStatusPlugin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\n// Custom merge which replaces arrays instead of merging them. The only arrays\n// used in default options are for PostCSS plugins, which we want the user to be\n// able to completely override.\nvar replaceArrayMerge = (0, _webpackMerge2.default)({ customizeArray(a, b, key) {\n    return b;\n  } });\n\n/**\n * Merge webpack rule config ({test, loader|use, options, include, exclude}) objects.\n */\nfunction mergeRuleConfig() {\n  var defaultConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var buildConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var rule = replaceArrayMerge(defaultConfig, buildConfig, userConfig);\n  if (rule.options && Object.keys(rule.options).length === 0) {\n    delete rule.options;\n  }\n  return rule;\n}\n\n/**\n * Create a function which configures a rule identified by a unique id, with\n * the option to override defaults with build-specific and user config.\n */\nvar ruleConfigFactory = exports.ruleConfigFactory = function ruleConfigFactory(buildConfig) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (id, defaultConfig) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$ident = _ref.ident,\n        ident = _ref$ident === undefined ? false : _ref$ident;\n\n    if (id) {\n      var rule = mergeRuleConfig(defaultConfig, buildConfig[id], userConfig[id]);\n      if (ident && rule.options) {\n        rule.options.ident = id;\n      }\n      return rule;\n    }\n    return defaultConfig;\n  };\n};\n\n/**\n * Create a function which applies a prefix to a given name when a prefix is\n * given, unless the prefix ends with a name, in which case the prefix itself is\n * returned.\n * The latter rule is to allow rules created for CSS preprocessor plugins to\n * be given unique ids for user configuration without duplicating the name of\n * the rule.\n * e.g.: styleRuleName('sass')('css') => 'sass-css'\n *       styleRuleName('sass')('sass') => 'sass' (as opposed to 'sass-sass')\n */\nvar styleRuleName = exports.styleRuleName = function styleRuleName(prefix) {\n  return function (name) {\n    if (prefix && prefix.endsWith(name)) {\n      return prefix;\n    }\n    return prefix ? `${prefix}-${name}` : name;\n  };\n};\n\n/**\n * Create a default style-handling pipeline for either a static build (default)\n * or a server build.\n */\nfunction createStyleLoaders(loader, server, userWebpackConfig) {\n  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref2$preprocessor = _ref2.preprocessor,\n      preprocessor = _ref2$preprocessor === undefined ? null : _ref2$preprocessor,\n      _ref2$prefix = _ref2.prefix,\n      prefix = _ref2$prefix === undefined ? null : _ref2$prefix;\n\n  var name = styleRuleName(prefix);\n  var styleLoader = loader(name('style'), {\n    loader: require.resolve('style-loader')\n  });\n  var loaders = [loader(name('css'), {\n    loader: require.resolve('css-loader'),\n    options: {\n      // Apply postcss-loader to @imports\n      importLoaders: 1\n    }\n  }), loader(name('postcss'), {\n    loader: require.resolve('postcss-loader'),\n    options: {\n      plugins: createDefaultPostCSSPlugins(userWebpackConfig)\n    }\n  }, { ident: true })];\n\n  if (preprocessor) {\n    loaders.push(loader(name(preprocessor.id), preprocessor.config, { ident: true }));\n  }\n\n  if (server) {\n    loaders.unshift(styleLoader);\n    return loaders;\n  } else {\n    return _extractTextWebpackPlugin2.default.extract({\n      fallbackLoader: styleLoader,\n      loader: loaders\n    });\n  }\n}\n\n/**\n * Final webpack rules config consists of:\n * - the default set of rules created in this function, with build and user\n *   config tweaks based on rule id.\n * - extra rules defined in build config, with user config tweaks based\n *   on rule id.\n * - extra rules created for CSS preprocessor plugins, with user config\n *   tweaks based on loader id.\n * - extra rules defined in user config.\n */\nfunction createRules(server) {\n  var buildConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userWebpackConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var pluginConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var rule = ruleConfigFactory(buildConfig, userWebpackConfig.rules);\n\n  // Default options for url-loader\n  var urlLoaderOptions = {\n    // Don't inline anything by default\n    limit: 1,\n    // Always use a hash to prevent files with the same name causing issues\n    name: '[name].[hash:8].[ext]'\n  };\n\n  var rules = [rule('babel', {\n    test: /\\.js$/,\n    loader: require.resolve('babel-loader'),\n    exclude: process.env.NWB_TEST ? /(node_modules|nwb[\\\\/]polyfills\\.js$)/ : /node_modules/,\n    options: {\n      // Don't look for .babelrc files\n      babelrc: false,\n      // Cache transformations to the filesystem (in default temp dir)\n      cacheDirectory: true\n    }\n  }), rule('css-pipeline', {\n    test: /\\.css$/,\n    use: createStyleLoaders(rule, server, userWebpackConfig),\n    exclude: /node_modules/\n  }), rule('vendor-css-pipeline', {\n    test: /\\.css$/,\n    use: createStyleLoaders(rule, server, userWebpackConfig, {\n      prefix: 'vendor'\n    }),\n    include: /node_modules/\n  }), rule('graphics', {\n    test: /\\.(gif|png|webp)$/,\n    loader: require.resolve('url-loader'),\n    options: _extends({}, urlLoaderOptions)\n  }), rule('svg', {\n    test: /\\.svg$/,\n    loader: require.resolve('url-loader'),\n    options: _extends({}, urlLoaderOptions)\n  }), rule('jpeg', {\n    test: /\\.jpe?g$/,\n    loader: require.resolve('url-loader'),\n    options: _extends({}, urlLoaderOptions)\n  }), rule('fonts', {\n    test: /\\.(eot|otf|ttf|woff|woff2)$/,\n    loader: require.resolve('url-loader'),\n    options: _extends({}, urlLoaderOptions)\n  }), rule('video', {\n    test: /\\.(mp4|ogg|webm)$/,\n    loader: require.resolve('url-loader'),\n    options: _extends({}, urlLoaderOptions)\n  }), rule('audio', {\n    test: /\\.(wav|mp3|m4a|aac|oga)(\\?.*)?$/,\n    loader: require.resolve('url-loader'),\n    options: _extends({}, urlLoaderOptions)\n  })].concat(createExtraRules(buildConfig.extra, userWebpackConfig.rules));\n\n  if (pluginConfig.cssPreprocessors) {\n    Object.keys(pluginConfig.cssPreprocessors).forEach(function (id) {\n      var _pluginConfig$cssPrep = pluginConfig.cssPreprocessors[id],\n          test = _pluginConfig$cssPrep.test,\n          preprocessorLoader = _pluginConfig$cssPrep.loader;\n\n      rules.push(rule(`${id}-pipeline`, {\n        test,\n        use: createStyleLoaders(rule, server, userWebpackConfig, {\n          prefix: id,\n          preprocessor: { id, config: { loader: preprocessorLoader } }\n        }),\n        exclude: /node_modules/\n      }));\n      rules.push(rule(`vendor-${id}-pipeline`, {\n        test,\n        use: createStyleLoaders(rule, server, userWebpackConfig, {\n          prefix: `vendor-${id}`,\n          preprocessor: { id, config: { loader: preprocessorLoader } }\n        }),\n        include: /node_modules/\n      }));\n    });\n  }\n\n  return rules;\n}\n\n/**\n * Create rules from rule definitions which may include an id attribute for\n * user customisation. It's assumed these are being created from build config.\n */\nfunction createExtraRules() {\n  var extraRules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var rule = ruleConfigFactory({}, userConfig);\n  return extraRules.map(function (extraRule) {\n    var id = extraRules.id,\n        ruleConfig = _objectWithoutProperties(extraRules, ['id']);\n\n    return rule(id, ruleConfig);\n  });\n}\n\n/**\n * Plugin for HtmlPlugin which inlines content for an extracted Webpack\n * manifest into the HTML page in a <script> tag before other emitted asssets\n * are injected by HtmlPlugin itself.\n */\nfunction injectManifestPlugin() {\n  this.plugin('compilation', function (compilation) {\n    compilation.plugin('html-webpack-plugin-before-html-processing', function (data, cb) {\n      Object.keys(compilation.assets).forEach(function (key) {\n        if (!key.startsWith('manifest.')) return;\n        var children = compilation.assets[key].children;\n\n        if (children && children[0]) {\n          data.html = data.html.replace(/^(\\s*)<\\/body>/m, `$1<script>${children[0]._value}</script>\\n$1</body>`);\n          // Remove the manifest from HtmlPlugin's assets to\n          // prevent a <script> tag being created for it.\n          var manifestIndex = data.assets.js.indexOf(data.assets.publicPath + key);\n          data.assets.js.splice(manifestIndex, 1);\n          delete data.assets.chunks.manifest;\n        }\n      });\n      cb(null, data);\n    });\n  });\n}\n\nfunction getCopyPluginArgs(buildConfig, userConfig) {\n  var patterns = [];\n  var options = {};\n  if (buildConfig) {\n    patterns = patterns.concat(buildConfig);\n  }\n  if (userConfig) {\n    patterns = patterns.concat(userConfig.patterns || []);\n    options = userConfig.options || {};\n  }\n  return [patterns, options];\n}\n\n/**\n * Final webpack plugin config consists of:\n * - the default set of plugins created by this function based on whether or not\n *   a server build is being configured, whether or not the build is for an\n *   app (for which HTML will be generated), plus environment variables.\n * - extra plugins managed by this function, whose inclusion is triggered by\n *   build config, which provides default configuration for them which can be\n *   tweaked by user plugin config when appropriate.\n * - any extra plugins defined in build and user config (extra user plugins are\n *   not handled here, but by the final merge of webpack.extra config).\n */\nfunction createPlugins(server) {\n  var buildConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var development = process.env.NODE_ENV === 'development';\n  var production = process.env.NODE_ENV === 'production';\n\n  var plugins = [\n  // Enforce case-sensitive import paths\n  new _caseSensitivePathsWebpackPlugin2.default(),\n  // Replace specified expressions with values\n  new _webpack2.default.DefinePlugin(_extends({\n    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')\n  }, buildConfig.define, userConfig.define))];\n\n  if (server) {\n    // HMR is enabled by default but can be explicitly disabled\n    if (server.hot !== false) {\n      plugins.push(new _webpack2.default.HotModuleReplacementPlugin(), new _webpack2.default.NoEmitOnErrorsPlugin());\n    }\n    if (buildConfig.status) {\n      plugins.push(new _WebpackStatusPlugin2.default(buildConfig.status));\n    }\n    // Use paths as names when serving\n    plugins.push(new _webpack2.default.NamedModulesPlugin());\n  }\n  // If we're not serving, we're creating a static build\n  else {\n      // Extract CSS required as modules out into files\n      var cssFilename = production ? `[name].[contenthash:8].css` : '[name].css';\n      plugins.push(new _extractTextWebpackPlugin2.default(_extends({\n        filename: cssFilename\n      }, userConfig.extractText)));\n\n      // Move modules imported from node_modules/ into a vendor chunk when enabled\n      if (buildConfig.vendor) {\n        plugins.push(new _webpack.optimize.CommonsChunkPlugin({\n          name: 'vendor',\n          minChunks(module, count) {\n            return module.resource && module.resource.includes('node_modules');\n          }\n        }));\n      }\n\n      // If we're generating an HTML file, we must be building a web app, so\n      // configure deterministic hashing for long-term caching.\n      if (buildConfig.html) {\n        plugins.push(\n        // Generate stable module ids instead of having Webpack assign integers.\n        // HashedModuleIdsPlugin (vendored from Webpack 2) does this without\n        // adding too much to bundle size and NamedModulesPlugin allows for\n        // easier debugging of development builds.\n        development ? new _webpack2.default.NamedModulesPlugin() : new _webpack2.default.HashedModuleIdsPlugin(),\n        // The MD5 Hash plugin seems to make [chunkhash] for .js files behave\n        // like [contenthash] does for extracted .css files, which is essential\n        // for deterministic hashing.\n        new _webpackMd5Hash2.default(),\n        // The Webpack manifest is normally folded into the last chunk, changing\n        // its hash - prevent this by extracting the manifest into its own\n        // chunk - also essential for deterministic hashing.\n        new _webpack.optimize.CommonsChunkPlugin({ name: 'manifest' }),\n        // Inject the Webpack manifest into the generated HTML as a <script>\n        injectManifestPlugin);\n      }\n    }\n\n  if (production) {\n    plugins.push(new _webpack2.default.LoaderOptionsPlugin({\n      debug: false,\n      minimize: true\n    }));\n    if (userConfig.uglify !== false) {\n      plugins.push(new _webpack.optimize.UglifyJsPlugin((0, _webpackMerge2.default)({\n        compress: {\n          warnings: false\n        },\n        output: {\n          comments: false\n        },\n        sourceMap: true\n      }, userConfig.uglify)));\n    }\n  }\n\n  // Generate an HTML file for web apps which pulls in generated resources\n  if (buildConfig.html) {\n    plugins.push(new _htmlWebpackPlugin2.default(_extends({\n      chunksSortMode: 'dependency',\n      template: _path2.default.join(__dirname, '../templates/webpack-template.html')\n    }, buildConfig.html, userConfig.html)));\n  }\n\n  // Copy static resources\n  if (buildConfig.copy) {\n    plugins.push(new (Function.prototype.bind.apply(_copyWebpackPlugin2.default, [null].concat(getCopyPluginArgs(buildConfig.copy, userConfig.copy))))());\n  }\n\n  // Automatically install missing npm dependencies and add them to package.json\n  // Must be enabled with an --install or --auto-install flag\n  if (buildConfig.autoInstall) {\n    plugins.push(new _npmInstallWebpackPlugin2.default(_extends({\n      peerDependencies: false,\n      quiet: true\n    }, userConfig.install)));\n  }\n\n  // Insert a banner comment at the top of generated files - used for UMD builds\n  if (buildConfig.banner) {\n    plugins.push(new _webpack2.default.BannerPlugin({ banner: buildConfig.banner }));\n  }\n\n  // Escape hatch for any extra plugins a particular build ever needs to add\n  if (buildConfig.extra) {\n    plugins = plugins.concat(buildConfig.extra);\n  }\n\n  return plugins;\n}\n\nfunction createDefaultPostCSSPlugins(userWebpackConfig) {\n  return [(0, _autoprefixer2.default)(_extends({\n    browsers: ['>1%', 'last 4 versions', 'Firefox ESR', 'not ie < 9']\n  }, userWebpackConfig.autoprefixer))];\n}\n\nvar COMPAT_CONFIGS = exports.COMPAT_CONFIGS = {\n  enzyme: {\n    externals: {\n      'react/addons': true,\n      'react/lib/ExecutionEnvironment': true,\n      'react/lib/ReactContext': true\n    }\n  },\n  moment(_ref3) {\n    var locales = _ref3.locales;\n\n    return {\n      plugins: [new _webpack2.default.ContextReplacementPlugin(/moment[/\\\\]locale$/, new RegExp(`^\\\\.\\\\/(${locales.join('|')})$`))]\n    };\n  },\n  sinon: {\n    module: {\n      noParse: [/[/\\\\]sinon\\.js/]\n    },\n    resolve: {\n      alias: {\n        sinon: 'sinon/pkg/sinon'\n      }\n    }\n  }\n};\n\n/**\n * Create a chunk of webpack config containing compatibility tweaks for\n * libraries which are known to cause issues, to be merged into the generated\n * config.\n * Returns null if there's nothing to merge based on user config.\n */\nfunction getCompatConfig() {\n  var userCompatConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var configs = [];\n  Object.keys(userCompatConfig).map(function (lib) {\n    if (!userCompatConfig[lib]) return;\n    var compatConfig = COMPAT_CONFIGS[lib];\n    if ((0, _utils.typeOf)(compatConfig) === 'function') {\n      compatConfig = compatConfig(userCompatConfig[lib]);\n      if (!compatConfig) return;\n    }\n    configs.push(compatConfig);\n  });\n  if (configs.length === 0) return null;\n  if (configs.length === 1) return _extends({}, configs[0]);\n  return _webpackMerge2.default.apply(undefined, configs);\n}\n\n/**\n * Add default polyfills to the head of the entry array.\n */\nfunction addPolyfillsToEntry(entry) {\n  if ((0, _utils.typeOf)(entry) === 'array') {\n    entry.unshift(require.resolve('../polyfills'));\n  } else {\n    // Assumption: there will only be one entry point, naming the entry chunk\n    entry[Object.keys(entry)[0]].unshift(require.resolve('../polyfills'));\n  }\n}\n\n/**\n * Create a webpack config with a curated set of default rules suitable for\n * creating a static build (default) or serving an app with hot reloading.\n */\nfunction createWebpackConfig(buildConfig) {\n  var nwbPluginConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  (0, _debug2.default)('createWebpackConfig buildConfig: %s', (0, _utils.deepToString)(buildConfig));\n\n  // Final webpack config is primarily driven by build configuration for the nwb\n  // command being run. Each command configures a default, working webpack\n  // configuration for the task it needs to perform.\n\n  var _buildConfig$babel = buildConfig.babel,\n      buildBabelConfig = _buildConfig$babel === undefined ? {} : _buildConfig$babel,\n      entry = buildConfig.entry,\n      buildOutputConfig = buildConfig.output,\n      buildPolyfill = buildConfig.polyfill,\n      _buildConfig$plugins = buildConfig.plugins,\n      buildPluginConfig = _buildConfig$plugins === undefined ? {} : _buildConfig$plugins,\n      _buildConfig$resolve = buildConfig.resolve,\n      buildResolveConfig = _buildConfig$resolve === undefined ? {} : _buildConfig$resolve,\n      _buildConfig$rules = buildConfig.rules,\n      buildRulesConfig = _buildConfig$rules === undefined ? {} : _buildConfig$rules,\n      _buildConfig$server = buildConfig.server,\n      server = _buildConfig$server === undefined ? false : _buildConfig$server,\n      otherBuildConfig = _objectWithoutProperties(buildConfig, ['babel', 'entry', 'output', 'polyfill', 'plugins', 'resolve', 'rules', 'server']);\n\n  var userWebpackConfig = userConfig.webpack || {};\n  var userOutputConfig = {};\n  if ('publicPath' in userWebpackConfig) {\n    userOutputConfig.publicPath = userWebpackConfig.publicPath;\n  }\n  var userResolveConfig = {};\n  if (userWebpackConfig.aliases) {\n    userResolveConfig.alias = userWebpackConfig.aliases;\n  }\n\n  // Generate config for babel-loader and set it as loader config for the build\n  buildRulesConfig.babel = { options: (0, _createBabelConfig2.default)(buildBabelConfig, userConfig.babel) };\n\n  var webpackConfig = _extends({\n    module: {\n      rules: createRules(server, buildRulesConfig, userWebpackConfig, nwbPluginConfig)\n    },\n    output: _extends({}, buildOutputConfig, userOutputConfig),\n    plugins: createPlugins(server, buildPluginConfig, userWebpackConfig),\n    resolve: (0, _webpackMerge2.default)({\n      extensions: ['.js', '.json']\n    }, buildResolveConfig, userResolveConfig),\n    resolveLoader: {\n      modules: ['node_modules',\n      // As of v2.25.0, html-webpack-plugin no longer outputs an absolute path\n      // to its loader, so we must fall back to nwb's node_modules/ for global\n      // usage.\n      _path2.default.join(__dirname, '../node_modules')]\n    }\n  }, otherBuildConfig);\n\n  if (entry) {\n    // Add default polyfills to the entry chunk unless configured not to\n    if (buildPolyfill !== false && userConfig.polyfill !== false) {\n      addPolyfillsToEntry(entry);\n    }\n    webpackConfig.entry = entry;\n  }\n\n  // Create and merge compatibility configuration into the generated config if\n  // specified.\n  if (userWebpackConfig.compat) {\n    var compatConfig = getCompatConfig(userWebpackConfig.compat);\n    if (compatConfig) {\n      webpackConfig = (0, _webpackMerge2.default)(webpackConfig, compatConfig);\n    }\n  }\n\n  // Any extra user webpack config is merged into the generated config to give\n  // them even more control.\n  if (userWebpackConfig.extra) {\n    webpackConfig = (0, _webpackMerge2.default)(webpackConfig, userWebpackConfig.extra);\n  }\n\n  return webpackConfig;\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createBabelConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = createBabelConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEFAULT_STAGE = 2;\nvar RUNTIME_PATH = _path2.default.dirname(require.resolve('babel-runtime/package'));\n\nfunction createBabelConfig() {\n  var buildConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var commonJSInterop = buildConfig.commonJSInterop,\n      env = buildConfig.env,\n      _buildConfig$modules = buildConfig.modules,\n      modules = _buildConfig$modules === undefined ? false : _buildConfig$modules,\n      _buildConfig$plugins = buildConfig.plugins,\n      buildPlugins = _buildConfig$plugins === undefined ? [] : _buildConfig$plugins,\n      buildPresets = buildConfig.presets,\n      setRuntimePath = buildConfig.setRuntimePath,\n      _buildConfig$stage = buildConfig.stage,\n      buildStage = _buildConfig$stage === undefined ? DEFAULT_STAGE : _buildConfig$stage,\n      _buildConfig$webpack = buildConfig.webpack,\n      webpack = _buildConfig$webpack === undefined ? true : _buildConfig$webpack;\n  var cherryPick = userConfig.cherryPick,\n      loose = userConfig.loose,\n      _userConfig$plugins = userConfig.plugins,\n      userPlugins = _userConfig$plugins === undefined ? [] : _userConfig$plugins,\n      userPresets = userConfig.presets,\n      userRuntime = userConfig.runtime,\n      userStage = userConfig.stage;\n\n\n  var presets = [];\n  var plugins = [];\n\n  // Default to loose mode unless explicitly configured\n  if ((0, _utils.typeOf)(loose) === 'undefined') {\n    loose = true;\n  }\n\n  // ES2015 and ES2016 presets\n  presets.push([require.resolve('babel-preset-es2015'), { loose, modules }], require.resolve('babel-preset-es2016'));\n\n  // Stage preset\n  var stage = userStage != null ? userStage : buildStage;\n  if (typeof stage == 'number') {\n    presets.push(require.resolve(`babel-preset-stage-${stage}`));\n    // Decorators are stage 2 but not supported by Babel yet - add the legacy\n    // transform for support in the meantime.\n    if (stage <= 2) {\n      plugins.push(require.resolve('babel-plugin-transform-decorators-legacy'));\n    }\n  }\n\n  // Additional build presets\n  if (Array.isArray(buildPresets)) {\n    buildPresets.forEach(function (preset) {\n      if (preset === 'inferno') {\n        presets.push(require.resolve('../babel-presets/inferno'));\n      } else if (preset === 'preact') {\n        presets.push(require.resolve('../babel-presets/preact'));\n      } else if (preset === 'react') {\n        presets.push(require.resolve('babel-preset-react'));\n        if (process.env.NODE_ENV === 'development') {\n          plugins.push(require.resolve('babel-plugin-transform-react-jsx-source'), require.resolve('babel-plugin-transform-react-jsx-self'));\n        }\n      } else if (preset === 'react-hmre') {\n        presets.push(require.resolve('../babel-presets/react-hmre'));\n      } else if (preset === 'react-prod') {\n        presets.push(require.resolve('../babel-presets/react-prod'));\n      } else {\n        throw new Error(`Unknown build preset: ${preset}`);\n      }\n    });\n  }\n\n  if (userPresets) {\n    presets = [].concat(presets, userPresets);\n  }\n\n  var config = { presets };\n\n  plugins = plugins.concat(buildPlugins, userPlugins);\n\n  // The Runtime transform imports various things into a module based on usage.\n  // Turn regenerator on by default to enable use of async/await and generators\n  // without configuration.\n  var runtimeTransformOptions = {\n    helpers: false,\n    polyfill: false,\n    regenerator: true\n  };\n  if (setRuntimePath !== false) {\n    runtimeTransformOptions.moduleName = RUNTIME_PATH;\n  }\n  if (userRuntime !== false) {\n    if (userRuntime === true) {\n      // Enable all features\n      runtimeTransformOptions = {};\n      if (setRuntimePath !== false) {\n        runtimeTransformOptions.moduleName = RUNTIME_PATH;\n      }\n    } else if ((0, _utils.typeOf)(userRuntime) === 'string') {\n      // Enable the named feature\n      runtimeTransformOptions[userRuntime] = true;\n    }\n    plugins.push([require.resolve('babel-plugin-transform-runtime'), runtimeTransformOptions]);\n  }\n\n  // Allow Babel to parse (but not transform) import() when used with Webpack\n  if (webpack) {\n    plugins.push(require.resolve('babel-plugin-syntax-dynamic-import'));\n  }\n\n  // Provide CommonJS interop so users don't have to tag a .default onto their\n  // imports if they're using vanilla Node.js require().\n  if (commonJSInterop) {\n    plugins.push(require.resolve('babel-plugin-add-module-exports'));\n  }\n\n  // The lodash plugin supports generic cherry-picking for named modules\n  if (cherryPick) {\n    plugins.push([require.resolve('babel-plugin-lodash'), { id: cherryPick }]);\n  }\n\n  if (plugins.length > 0) {\n    config.plugins = plugins;\n  }\n\n  // Pass any given env config through\n  if (env) {\n    config.env = env;\n  }\n\n  return config;\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/utils.js":"'use strict';\n\nexports.__esModule = true;\nexports.clean = clean;\nexports.clearConsole = clearConsole;\nexports.deepToString = deepToString;\nexports.getArgsPlugins = getArgsPlugins;\nexports.install = install;\nexports.joinAnd = joinAnd;\nexports.toSource = toSource;\nexports.typeOf = typeOf;\nexports.unique = unique;\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _crossSpawn = require('cross-spawn');\n\nvar _crossSpawn2 = _interopRequireDefault(_crossSpawn);\n\nvar _ora = require('ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nvar _resolve = require('resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _rimraf = require('rimraf');\n\nvar _rimraf2 = _interopRequireDefault(_rimraf);\n\nvar _runSeries = require('run-series');\n\nvar _runSeries2 = _interopRequireDefault(_runSeries);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Check if any of the given directories exist and delete them while displaying\n * a spinner if so.\n * @param {string} desc a description of what's being cleaned, e.g. 'app'\n * @param {Array<string>} dirs paths to delete.\n * @param {function(?Error=)} cb\n */\nfunction clean(desc, dirs, cb) {\n  (0, _glob2.default)(`+(${dirs.join('|')})/`, function (err, dirs) {\n    if (err) return cb(err);\n    if (dirs.length === 0) return cb();\n    var spinner = (0, _ora2.default)(`Cleaning ${desc}`).start();\n    (0, _runSeries2.default)(dirs.map(function (dir) {\n      return function (cb) {\n        return (0, _rimraf2.default)(dir, cb);\n      };\n    }), function (err) {\n      if (err) {\n        spinner.fail();\n        return cb(err);\n      }\n      spinner.succeed();\n      cb();\n    });\n  });\n}\n\n/**\n * Clear console scrollback.\n */\nfunction clearConsole() {\n  // XXX Hack for testing\n  // TODO Give users a way to disable console clearing\n  if (process.env.NWB_TEST) return;\n  // This will completely wipe scrollback in cmd.exe on Windows - use cmd.exe's\n  // `start` command to launch nwb's dev server in a new prompt if you don't\n  // want to lose it.\n  process.stdout.write(process.platform === 'win32' ? '\\x1Bc' : '\\x1B[2J\\x1B[3J\\x1B[H');\n}\n\n/**\n * Log objects in their entirety so we can see everything in debug output.\n */\nfunction deepToString(object) {\n  return _util2.default.inspect(object, { colors: true, depth: null });\n}\n\n/**\n * Get a list of nwb plugin names passed as arguments.\n * @param {Object} args parsed arguments.\n * @param {string=} args.plugins comma-separated list of nwb plugin names.\n * @param {string=} args.plugin typo'd comma-separated list of nwb plugin names.\n * @return {Array<string>}\n */\nfunction getArgsPlugins(args) {\n  var plugins = args.plugins || args.plugin;\n  if (!plugins) return [];\n  return plugins.split(',').map(function (name) {\n    return name.replace(/^(nwb-)?/, 'nwb-');\n  });\n}\n\n/**\n * Install packages from npm.\n * @param {Array<string>} packages npm package names, which may be in\n *   package@version format.\n * @param {Object=} options\n   @param {Object=} options.args parsed arguments.\n * @param {boolean=} options.check check if packages are resolvable from\n *   the cwd and skip installation if already installed.\n * @param {string=} options.cwd working directory to install in.\n * @param {boolean=} options.dev save dependencies to devDependencies.\n * @param {boolean=} options.save save dependencies to package.json.\n * @param {function(?Error)} cb completion callback.\n */\nfunction install(packages, options, cb) {\n  if (typeOf(options) === 'function') {\n    cb = options;\n    options = {};\n  }\n  var _options = options,\n      _options$args = _options.args,\n      args = _options$args === undefined ? null : _options$args,\n      _options$check = _options.check,\n      check = _options$check === undefined ? false : _options$check,\n      _options$cwd = _options.cwd,\n      cwd = _options$cwd === undefined ? process.cwd() : _options$cwd,\n      _options$dev = _options.dev,\n      dev = _options$dev === undefined ? false : _options$dev,\n      _options$save = _options.save,\n      save = _options$save === undefined ? false : _options$save;\n\n  // If the command being run allows users to specify an nwb plugins option by\n  // providing the args object here, make sure they're installed.\n\n  if (args) {\n    packages = packages.concat(getArgsPlugins(args));\n  }\n\n  if (check) {\n    packages = packages.filter(function (pkg) {\n      // Assumption: we're not dealing with scoped packages, which start with @\n      var name = pkg.split('@')[0];\n      try {\n        _resolve2.default.sync(name, { basedir: cwd });\n        return false;\n      } catch (e) {\n        return true;\n      }\n    });\n  }\n\n  if (packages.length === 0) {\n    return process.nextTick(cb);\n  }\n\n  var npmArgs = ['install', '--silent', '--no-progress'];\n\n  if (save) {\n    npmArgs.push(`--save${dev ? '-dev' : ''}`);\n  }\n\n  npmArgs = npmArgs.concat(packages);\n\n  (0, _debug2.default)(`${cwd} $ npm ${npmArgs.join(' ')}`);\n  var spinner = (0, _ora2.default)(`Installing ${joinAnd(packages)}`).start();\n  var npm = (0, _crossSpawn2.default)('npm', npmArgs, { cwd, stdio: ['ignore', 'pipe', 'inherit'] });\n  npm.on('close', function (code) {\n    if (code !== 0) {\n      spinner.fail();\n      return cb(new Error('npm install failed'));\n    }\n    spinner.succeed();\n    cb();\n  });\n}\n\n/**\n * Join multiple items with a penultimate \"and\".\n * @param {Array<*>} arr\n */\nfunction joinAnd(array) {\n  if (array.length === 0) return '';\n  if (array.length === 1) return String(array[0]);\n  return `${array.slice(0, -1).join(', ')} and ${array[array.length - 1]}`;\n}\n\n/**\n * Hack to generate simple config file contents by stringifying to JSON, but\n * without JSON formatting.\n */\nfunction toSource(obj) {\n  return JSON.stringify(obj, null, 2).replace(/\"([^\"]+)\":/g, '$1:').replace(/\"/g, \"'\");\n}\n\n/**\n * Better typeof.\n */\nfunction typeOf(o) {\n  if (Number.isNaN(o)) return 'nan';\n  return Object.prototype.toString.call(o).slice(8, -1).toLowerCase();\n}\n\n/**\n * @param {Array<string>} strings\n */\nfunction unique(strings) {\n  // eslint-disable-next-line\n  return Object.keys(strings.reduce(function (o, s) {\n    return o[s] = true, o;\n  }, {}));\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/debug.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _debug2.default)('nwb');\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/WebpackStatusPlugin.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _utils = require('./utils');\n\nvar _webpackUtils = require('./webpackUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Display current build status for a Webpack watch build.\n * Based on create-react-app@0.2's start script.\n */\nvar StatusPlugin = function () {\n  function StatusPlugin() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$message = _ref.message,\n        message = _ref$message === undefined ? '' : _ref$message,\n        _ref$middleware = _ref.middleware,\n        middleware = _ref$middleware === undefined ? false : _ref$middleware,\n        _ref$test = _ref.test,\n        test = _ref$test === undefined ? false : _ref$test;\n\n    _classCallCheck(this, StatusPlugin);\n\n    // Provides details of the URL the dev server is available at\n    this.message = message;\n    // Flag: don't clear the console as we're in someone else's server\n    this.middleware = middleware;\n    // Flag: ONLY log errors and warnings\n    this.test = test;\n\n    // We only want to display the \"Starting...\" message once\n    this.initial = true;\n\n    this.watchRun = this.watchRun.bind(this);\n    this.done = this.done.bind(this);\n  }\n\n  StatusPlugin.prototype.apply = function apply(compiler) {\n    compiler.plugin('watch-run', this.watchRun);\n    compiler.plugin('done', this.done);\n  };\n\n  StatusPlugin.prototype.clearConsole = function clearConsole() {\n    if (!this.test) {\n      (0, _utils.clearConsole)();\n    }\n  };\n\n  StatusPlugin.prototype.log = function log(message) {\n    if (!this.test) {\n      console.log(message);\n    }\n  };\n\n  StatusPlugin.prototype.watchRun = function watchRun(watching, cb) {\n    if (!this.middleware) {\n      this.clearConsole();\n    }\n    if (this.initial) {\n      this.log(_chalk2.default.cyan('Starting Webpack compilation...'));\n      this.initial = false;\n    } else {\n      this.log('Recompiling...');\n    }\n    cb();\n  };\n\n  StatusPlugin.prototype.done = function done(stats) {\n    if (!this.middleware) {\n      this.clearConsole();\n    }\n\n    var hasErrors = stats.hasErrors();\n    var hasWarnings = stats.hasWarnings();\n\n    if (!hasErrors && !hasWarnings) {\n      var time = stats.endTime - stats.startTime;\n      this.log(_chalk2.default.green(`Compiled successfully in ${time} ms.`));\n    } else {\n      (0, _webpackUtils.logErrorsAndWarnings)(stats);\n      if (hasErrors) return;\n    }\n\n    if (!this.middleware) {\n      this.log('');\n      this.log(this.message);\n    }\n  };\n\n  return StatusPlugin;\n}();\n\nexports.default = StatusPlugin;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/webpackUtils.js":"'use strict';\n\nexports.__esModule = true;\nexports.createBanner = createBanner;\nexports.createExternals = createExternals;\nexports.logBuildResults = logBuildResults;\nexports.logErrorsAndWarnings = logErrorsAndWarnings;\nexports.logGzippedFileSizes = logGzippedFileSizes;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _figures = require('figures');\n\nvar _figures2 = _interopRequireDefault(_figures);\n\nvar _filesize = require('filesize');\n\nvar _filesize2 = _interopRequireDefault(_filesize);\n\nvar _gzipSize = require('gzip-size');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FRIENDLY_SYNTAX_ERROR_LABEL = 'Syntax error:';\n\nvar s = function s(n) {\n  return n === 1 ? '' : 's';\n};\n\n/**\n * Create a banner comment for a UMD build file from package.json config.\n */\nfunction createBanner(pkg) {\n  var banner = `${pkg.name} v${pkg.version}`;\n  if (pkg.homepage) {\n    banner += ` - ${pkg.homepage}`;\n  }\n  if (pkg.license) {\n    banner += `\\n${pkg.license} Licensed`;\n  }\n  return banner;\n}\n\n/**\n * Create Webpack externals config from a module → global variable mapping.\n */\nfunction createExternals() {\n  var externals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  return Object.keys(externals).reduce(function (webpackExternals, packageName) {\n    var globalName = externals[packageName];\n    webpackExternals[packageName] = {\n      root: globalName,\n      commonjs2: packageName,\n      commonjs: packageName,\n      amd: packageName\n    };\n    return webpackExternals;\n  }, {});\n}\n\nfunction formatMessage(message) {\n  return message\n  // Make some common errors shorter:\n  .replace(\n  // Babel syntax error\n  'Module build failed: SyntaxError:', FRIENDLY_SYNTAX_ERROR_LABEL).replace(\n  // Webpack file not found error\n  /Module not found: Error: Cannot resolve 'file' or 'directory'/, 'Module not found:')\n  // Webpack loader names obscure CSS filenames\n  .replace(/^.*css-loader.*!/gm, '');\n}\n\nfunction isLikelyASyntaxError(message) {\n  return message.includes(FRIENDLY_SYNTAX_ERROR_LABEL);\n}\n\nfunction formatMessages(messages, type) {\n  return messages.map(function (message) {\n    return `${type} in ${formatMessage(message)}`;\n  });\n}\n\nfunction getFileDetails(stats) {\n  var outputPath = stats.compilation.outputOptions.path;\n  return Object.keys(stats.compilation.assets).filter(function (assetName) {\n    return (/\\.(css|js)$/.test(assetName)\n    );\n  }).map(function (assetName) {\n    var size = (0, _gzipSize.sync)(stats.compilation.assets[assetName].source());\n    return {\n      dir: _path2.default.dirname(_path2.default.join(_path2.default.relative(process.cwd(), outputPath), assetName)),\n      name: _path2.default.basename(assetName),\n      size,\n      sizeLabel: (0, _filesize2.default)(size)\n    };\n  });\n}\n\nfunction logBuildResults(stats, spinner) {\n  if (stats.hasErrors()) {\n    if (spinner) {\n      spinner.fail();\n      console.log();\n    }\n    logErrorsAndWarnings(stats);\n  } else if (stats.hasWarnings()) {\n    if (spinner) {\n      spinner.stopAndPersist(_chalk2.default.yellow(_figures2.default.warning));\n      console.log();\n    }\n    logErrorsAndWarnings(stats);\n    console.log();\n    logGzippedFileSizes(stats);\n  } else {\n    if (spinner) {\n      spinner.succeed();\n      console.log();\n    }\n    logGzippedFileSizes(stats);\n  }\n}\n\nfunction logErrorsAndWarnings(stats) {\n  // Show fewer error details\n  var json = stats.toJson({}, true);\n\n  var formattedErrors = formatMessages(json.errors, _chalk2.default.bgRed.white(' ERROR '));\n  var formattedWarnings = formatMessages(json.warnings, _chalk2.default.bgYellow.black(' WARNING '));\n\n  if (stats.hasErrors()) {\n    var errors = formattedErrors.length;\n    console.log(_chalk2.default.red(`Failed to compile with ${errors} error${s(errors)}.`));\n    if (formattedErrors.some(isLikelyASyntaxError)) {\n      // If there are any syntax errors, show just them.\n      // This prevents a confusing ESLint parsing error preceding a much more\n      // useful Babel syntax error.\n      formattedErrors = formattedErrors.filter(isLikelyASyntaxError);\n    }\n    formattedErrors.forEach(function (message) {\n      console.log();\n      console.log(message);\n    });\n    return;\n  }\n\n  if (stats.hasWarnings()) {\n    var warnings = formattedWarnings.length;\n    console.log(_chalk2.default.yellow(`Compiled with ${warnings} warning${s(warnings)}.`));\n    formattedWarnings.forEach(function (message) {\n      console.log();\n      console.log(message);\n    });\n  }\n}\n\n/**\n * Take any number of Webpack Stats objects and log the gzipped size of the JS\n * and CSS assets they contain, largest-first.\n */\nfunction logGzippedFileSizes() {\n  for (var _len = arguments.length, stats = Array(_len), _key = 0; _key < _len; _key++) {\n    stats[_key] = arguments[_key];\n  }\n\n  var files = stats.reduce(function (files, stats) {\n    return files.concat(getFileDetails(stats));\n  }, []).filter(function (_ref) {\n    var name = _ref.name;\n    return !/^manifest\\.[a-z\\d]+\\.js$/.test(name);\n  });\n\n  var longest = files.reduce(function (max, _ref2) {\n    var dir = _ref2.dir,\n        name = _ref2.name;\n\n    var length = (dir + name).length;\n    return length > max ? length : max;\n  }, 0);\n  var pad = function pad(dir, name) {\n    return Array(longest - (dir + name).length + 1).join(' ');\n  };\n\n  console.log(`File size${s(files.length)} after gzip:`);\n  console.log();\n\n  files.sort(function (a, b) {\n    return b.size - a.size;\n  }).forEach(function (_ref3) {\n    var dir = _ref3.dir,\n        name = _ref3.name,\n        sizeLabel = _ref3.sizeLabel;\n\n    console.log(`  ${_chalk2.default.dim(`${dir}${_path2.default.sep}`)}${_chalk2.default.cyan(name)}` + `  ${pad(dir, name)}${_chalk2.default.green(sizeLabel)}`);\n  });\n\n  console.log();\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/getPluginConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = getPluginConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _resolve = require('resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getPackagePlugins(cwd) {\n  var pkg = require(_path2.default.join(cwd, 'package.json'));\n  return [].concat(Object.keys(pkg.dependencies || {}), Object.keys(pkg.devDependencies || {})).filter(function (dep) {\n    return (/^nwb-/.test(dep)\n    );\n  });\n}\n\n/**\n * Look for nwb-* plugin dependencies in package.json and plugins specified as\n * arguments when supported, import them and merge the plugin config objects\n * they export.\n */\nfunction getPluginConfig() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$args = _ref.args,\n      args = _ref$args === undefined ? {} : _ref$args,\n      _ref$cwd = _ref.cwd,\n      cwd = _ref$cwd === undefined ? process.cwd() : _ref$cwd;\n\n  var plugins = [];\n\n  try {\n    var pkgPlugins = plugins.concat(getPackagePlugins(cwd));\n    (0, _debug2.default)('%s nwb-* dependencies in package.json', pkgPlugins.length);\n    plugins = plugins.concat(pkgPlugins);\n  } catch (e) {\n    // pass\n  }\n\n  var argsPlugins = (0, _utils.getArgsPlugins)(args);\n  if (argsPlugins.length !== 0) {\n    (0, _debug2.default)('%s plugins in arguments', argsPlugins.length);\n    plugins = plugins.concat(argsPlugins);\n  }\n\n  if (plugins.length === 0) {\n    return {};\n  }\n\n  plugins = (0, _utils.unique)(plugins);\n  (0, _debug2.default)('nwb plugins: %o', plugins);\n\n  var pluginConfig = {};\n  plugins.forEach(function (plugin) {\n    var pluginModule = require(_resolve2.default.sync(plugin, { basedir: cwd }));\n    pluginConfig = (0, _webpackMerge2.default)(pluginConfig, pluginModule);\n  });\n\n  (0, _debug2.default)('plugin config: %s', (0, _utils.deepToString)(pluginConfig));\n\n  return pluginConfig;\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/getUserConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.UserConfigReport = undefined;\nexports.prepareWebpackRuleConfig = prepareWebpackRuleConfig;\nexports.processUserConfig = processUserConfig;\nexports.default = getUserConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _figures = require('figures');\n\nvar _figures2 = _interopRequireDefault(_figures);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _webpack = require('webpack');\n\nvar _webpack2 = _interopRequireDefault(_webpack);\n\nvar _constants = require('./constants');\n\nvar _createWebpackConfig = require('./createWebpackConfig');\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _errors = require('./errors');\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DEFAULT_REQUIRED = false;\n\nvar BABEL_RUNTIME_OPTIONS = new Set(['helpers', 'polyfill']);\n\nvar s = function s(n) {\n  var w = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',s';\n  return w.split(',')[n === 1 ? 0 : 1];\n};\n\nvar UserConfigReport = exports.UserConfigReport = function () {\n  function UserConfigReport(configPath) {\n    _classCallCheck(this, UserConfigReport);\n\n    this.configPath = configPath;\n    this.deprecations = [];\n    this.errors = [];\n    this.hints = [];\n  }\n\n  UserConfigReport.prototype.deprecated = function deprecated(path) {\n    for (var _len = arguments.length, messages = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      messages[_key - 1] = arguments[_key];\n    }\n\n    this.deprecations.push({ path, messages });\n  };\n\n  UserConfigReport.prototype.error = function error(path, value, message) {\n    this.errors.push({ path, value, message });\n  };\n\n  UserConfigReport.prototype.hasErrors = function hasErrors() {\n    return this.errors.length > 0;\n  };\n\n  UserConfigReport.prototype.hasSomethingToReport = function hasSomethingToReport() {\n    return this.errors.length + this.deprecations.length + this.hints.length > 0;\n  };\n\n  UserConfigReport.prototype.hint = function hint(path) {\n    for (var _len2 = arguments.length, messages = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      messages[_key2 - 1] = arguments[_key2];\n    }\n\n    this.hints.push({ path, messages });\n  };\n\n  UserConfigReport.prototype.log = function log() {\n    console.log(_chalk2.default.underline(`nwb config report for ${this.configPath}`));\n    console.log();\n    if (!this.hasSomethingToReport()) {\n      console.log(_chalk2.default.green(`${_figures2.default.tick} Nothing to report!`));\n      return;\n    }\n\n    if (this.errors.length) {\n      var count = this.errors.length > 1 ? `${this.errors.length} ` : '';\n      console.log(_chalk2.default.red.underline(`${count}Error${s(this.errors.length)}`));\n      console.log();\n    }\n    this.errors.forEach(function (_ref) {\n      var path = _ref.path,\n          value = _ref.value,\n          message = _ref.message;\n\n      console.log(`${_chalk2.default.red(`${_figures2.default.cross} ${path}`)} ${_chalk2.default.cyan('=')} ${_util2.default.inspect(value)}`);\n      console.log(`  ${message}`);\n      console.log();\n    });\n    if (this.deprecations.length) {\n      var _count = this.deprecations.length > 1 ? `${this.deprecations.length} ` : '';\n      console.log(_chalk2.default.yellow.underline(`${_count}Deprecation Warning${s(this.deprecations.length)}`));\n      console.log();\n    }\n    this.deprecations.forEach(function (_ref2) {\n      var path = _ref2.path,\n          messages = _ref2.messages;\n\n      console.log(_chalk2.default.yellow(`${_figures2.default.warning} ${path}`));\n      messages.forEach(function (message) {\n        console.log(`  ${message}`);\n      });\n      console.log();\n    });\n    if (this.hints.length) {\n      var _count2 = this.hints.length > 1 ? `${this.hints.length} ` : '';\n      console.log(_chalk2.default.cyan.underline(`${_count2}Hint${s(this.hints.length)}`));\n      console.log();\n    }\n    this.hints.forEach(function (_ref3) {\n      var path = _ref3.path,\n          messages = _ref3.messages;\n\n      console.log(_chalk2.default.cyan(`${_figures2.default.info} ${path}`));\n      messages.forEach(function (message) {\n        console.log(`  ${message}`);\n      });\n      console.log();\n    });\n  };\n\n  return UserConfigReport;\n}();\n\nfunction checkForRedundantCompatAliases(projectType, aliases, configPath, report) {\n  if (!new Set([_constants.INFERNO_APP, _constants.PREACT_APP]).has(projectType)) return;\n  if (!aliases) return;\n\n  var compatModule = `${projectType.split('-')[0]}-compat`;\n  if (aliases.react && aliases.react.includes(compatModule)) {\n    report.hint(`${configPath}.react`, `nwb aliases ${_chalk2.default.yellow('react')} to ${_chalk2.default.green(compatModule)} by default, so you can remove this config.`);\n  }\n  if (aliases['react-dom'] && aliases['react-dom'].includes(compatModule)) {\n    report.hint(`${configPath}.react-dom`, `nwb aliases ${_chalk2.default.yellow('react-dom')} to ${_chalk2.default.green(compatModule)} by default, so you can remove this config.`);\n  }\n}\n\n/**\n * Move loader options into an options object, allowing users to provide flatter\n * config.\n */\nfunction prepareWebpackRuleConfig(rules) {\n  Object.keys(rules).forEach(function (ruleId) {\n    var rule = rules[ruleId];\n    if (rule.options) return;\n\n    var exclude = rule.exclude,\n        include = rule.include,\n        test = rule.test,\n        options = _objectWithoutProperties(rule, ['exclude', 'include', 'test']); // eslint-disable-line no-unused-vars\n\n\n    if (Object.keys(options).length > 0) {\n      rule.options = options;\n      Object.keys(options).forEach(function (prop) {\n        return delete rule[prop];\n      });\n    }\n  });\n}\n\n// TODO Remove in a future version\nvar warnedAboutKarmaTestDirs = false;\nvar warnedAboutPostCSSConfig = false;\nvar warnedAboutWebpackLoaders = false;\nvar warnedAboutWebpackRuleQuery = false;\n\n/**\n * Validate user config and perform any necessary validation and transformation\n * to it.\n */\nfunction processUserConfig(_ref4) {\n  var args = _ref4.args,\n      _ref4$check = _ref4.check,\n      check = _ref4$check === undefined ? false : _ref4$check,\n      _ref4$required = _ref4.required,\n      required = _ref4$required === undefined ? DEFAULT_REQUIRED : _ref4$required,\n      userConfig = _ref4.userConfig,\n      userConfigPath = _ref4.userConfigPath;\n\n  // Config modules can export a function if they need to access the current\n  // command or the webpack dependency nwb manages for them.\n  if ((0, _utils.typeOf)(userConfig) === 'function') {\n    userConfig = userConfig({\n      args,\n      command: args._[0],\n      webpack: _webpack2.default\n    });\n  }\n\n  var report = new UserConfigReport(userConfigPath);\n\n  if ((required || 'type' in userConfig) && !_constants.PROJECT_TYPES.has(userConfig.type)) {\n    report.error('type', userConfig.type, `Must be one of: ${[].concat(_constants.PROJECT_TYPES).join(', ')}`);\n  }\n\n  // Set defaults for config objects so we don't have to existence-check them\n  // everywhere.\n  void ['babel', 'karma', 'npm', 'webpack'].forEach(function (prop) {\n    if (!(prop in userConfig)) userConfig[prop] = {};\n  });\n\n  // Babel config\n  if (!!userConfig.babel.stage || userConfig.babel.stage === 0) {\n    if ((0, _utils.typeOf)(userConfig.babel.stage) !== 'number') {\n      report.error('babel.stage', userConfig.babel.stage, `Must be a ${_chalk2.default.cyan('Number')} between ${_chalk2.default.cyan('0')} and ${_chalk2.default.cyan('3')}, ` + `or ${_chalk2.default.cyan('false')} to disable use of a stage preset.`);\n    } else if (userConfig.babel.stage < 0 || userConfig.babel.stage > 3) {\n      report.error('babel.stage', userConfig.babel.stage, `Must be between ${_chalk2.default.cyan(0)} and ${_chalk2.default.cyan(3)}`);\n    }\n  }\n  if (userConfig.babel.presets && (0, _utils.typeOf)(userConfig.babel.presets) !== 'array') {\n    report.error('babel.presets', userConfig.babel.presets, `Must be an ${_chalk2.default.cyan('Array')}`);\n  }\n  if (userConfig.babel.plugins && (0, _utils.typeOf)(userConfig.babel.plugins) !== 'array') {\n    report.error('babel.plugins', userConfig.babel.plugins, `Must be an ${_chalk2.default.cyan('Array')}`);\n  }\n  if ('runtime' in userConfig.babel && (0, _utils.typeOf)(userConfig.babel.runtime) !== 'boolean' && !BABEL_RUNTIME_OPTIONS.has(userConfig.babel.runtime)) {\n    report.error('babel.runtime', userConfig.babel.runtime, `Must be ${_chalk2.default.cyan('boolean')}, ${_chalk2.default.cyan(\"'helpers'\")} or ${_chalk2.default.cyan(\"'polyfill'\")})`);\n  }\n\n  if ('loose' in userConfig.babel) {\n    if ((0, _utils.typeOf)(userConfig.babel.loose) !== 'boolean') {\n      report.error('babel.loose', userConfig.babel.loose, `Must be ${_chalk2.default.cyan('boolean')}`);\n    } else if (userConfig.babel.loose === true) {\n      report.hint('babel.loose', 'Loose mode is enabled by default, so you can remove this config.');\n    }\n  }\n\n  // Karma config\n  // TODO Remove in a future version\n  if (userConfig.karma.testDir || userConfig.karma.testDirs) {\n    // We secretly supported passing testDir too\n    var prop = userConfig.karma.testDir ? 'testDir' : 'testDirs';\n    if (!warnedAboutKarmaTestDirs) {\n      report.deprecated(`karma.${prop}`, `Deprecated as of nwb v0.15 - this has been renamed to ${_chalk2.default.green('karma.excludeFromCoverage')}.`);\n      warnedAboutKarmaTestDirs = true;\n    }\n    userConfig.karma.excludeFromCoverage = userConfig.karma[prop];\n    delete userConfig.karma[prop];\n  }\n\n  // npm build config\n  if ((0, _utils.typeOf)(userConfig.npm.umd) === 'string') {\n    userConfig.npm.umd = { global: userConfig.npm.umd };\n  }\n\n  // Webpack config\n  if ((0, _utils.typeOf)(userConfig.webpack.autoprefixer) === 'string') {\n    userConfig.webpack.autoprefixer = { browsers: userConfig.webpack.autoprefixer };\n  }\n\n  if ('copy' in userConfig.webpack) {\n    if ((0, _utils.typeOf)(userConfig.webpack.copy) === 'array') {\n      userConfig.webpack.copy = { patterns: userConfig.webpack.copy };\n    } else if ((0, _utils.typeOf)(userConfig.webpack.copy) === 'object') {\n      if (!userConfig.webpack.copy.patterns && !userConfig.webpack.copy.options) {\n        report.error('webpack.copy', userConfig.webpack.copy, `Must include ${_chalk2.default.cyan('patterns')} or ${_chalk2.default.cyan('options')} when given as an ${_chalk2.default.cyan('Object')}`);\n      }\n      if (userConfig.webpack.copy.patterns && (0, _utils.typeOf)(userConfig.webpack.copy.patterns) !== 'array') {\n        report.error('webpack.copy.patterns', userConfig.webpack.copy.patterns, `Must be an ${_chalk2.default.cyan('Array')} when provided`);\n      }\n      if (userConfig.webpack.copy.options && (0, _utils.typeOf)(userConfig.webpack.copy.options) !== 'object') {\n        report.error('webpack.copy.options', userConfig.webpack.copy.options, `Must be an ${_chalk2.default.cyan('Object')} when provided.`);\n      }\n    } else {\n      report.error('webpack.copy', userConfig.webpack.copy, `Must be an ${_chalk2.default.cyan('Array')} or an ${_chalk2.default.cyan('Object')}.`);\n    }\n  }\n\n  if (userConfig.webpack.compat) {\n    var compatProps = Object.keys(userConfig.webpack.compat);\n    var unknownCompatProps = compatProps.filter(function (prop) {\n      return !(prop in _createWebpackConfig.COMPAT_CONFIGS);\n    });\n    if (unknownCompatProps.length !== 0) {\n      report.error('userConfig.webpack.compat', compatProps, `Unknown propert${unknownCompatProps.length === 1 ? 'y' : 'ies'} present.` + `Valid properties are: ${Object.keys(_createWebpackConfig.COMPAT_CONFIGS).join(', ')}.`);\n    }\n\n    if (userConfig.webpack.compat.moment && (0, _utils.typeOf)(userConfig.webpack.compat.moment.locales) !== 'array') {\n      report.error('webpack.compat.moment.locales', _webpack2.default.compat.moment.locales, 'Must be an Array.');\n    }\n  }\n\n  if (userConfig.webpack.vendorBundle === false) {\n    report.error('webpack.vendorBundle', _webpack2.default.vendorBundle, 'No longer supported - add a --no-vendor flag to your build command instead.');\n  }\n\n  // TODO Remove in a future version - just validate type and monkey patch rule\n  //      config for ExtractTextPlugin (which will hopefull get fixed in the\n  //      meantime).\n  if ('loaders' in userConfig.webpack) {\n    if (!warnedAboutWebpackLoaders) {\n      report.deprecated('webpack.loaders', `Deprecated as of nwb v0.15 - this has been renamed to ${_chalk2.default.green('webpack.rules')} to match Webpack 2 config.`);\n      warnedAboutWebpackLoaders = true;\n    }\n    userConfig.webpack.rules = userConfig.webpack.loaders;\n    delete userConfig.webpack.loaders;\n  }\n  // TODO Remove in a future version\n  if ('postcss' in userConfig.webpack) {\n    var messages = [`Deprecated as of nwb v0.15 - PostCSS plugins are now configured in ${_chalk2.default.green('webpack.rules')} using postcss loader ids.`];\n    var configType = (0, _utils.typeOf)(userConfig.webpack.postcss);\n    if (configType === 'array' || configType === 'object' && (0, _utils.typeOf)(userConfig.webpack.postcss.defaults) === 'array') {\n      if (!('rules' in userConfig.webpack)) {\n        userConfig.webpack.rules = {};\n      }\n      userConfig.webpack.rules.postcss = {\n        plugins: configType === 'array' ? userConfig.webpack.postcss : userConfig.webpack.postcss.defaults\n      };\n      messages.push(`nwb will use ${_chalk2.default.yellow(`webpack.postcss${configType === 'object' ? '.defaults' : ''}`)} as ${_chalk2.default.green('webpack.rules.postcss.plugins')} config during a build.`);\n    } else {\n      messages.push(`nwb will use its default PostCSS config during a build.`);\n    }\n    if (!warnedAboutPostCSSConfig) {\n      report.deprecated.apply(report, ['webpack.postcss'].concat(messages));\n      warnedAboutPostCSSConfig = true;\n    }\n    delete _webpack2.default.postcss;\n  }\n\n  if ('rules' in userConfig.webpack) {\n    if ((0, _utils.typeOf)(userConfig.webpack.rules) !== 'object') {\n      report.error('webpack.rules', `type: ${(0, _utils.typeOf)(userConfig.webpack.rules)}`, 'Must be an Object.');\n    } else {\n      Object.keys(userConfig.webpack.rules).forEach(function (ruleId) {\n        if (userConfig.webpack.rules[ruleId].query) {\n          if (!warnedAboutWebpackRuleQuery) {\n            report.deprecated('query Object in webpack.rules config', `Deprecated as of nwb v0.15 - an ${_chalk2.default.green('options')} Object should now be used to specify rule options, to match Webpack 2 config.`);\n            warnedAboutWebpackRuleQuery = true;\n          }\n          userConfig.webpack.rules[ruleId].options = userConfig.webpack.rules[ruleId].query;\n          delete userConfig.webpack.rules[ruleId].query;\n        }\n      });\n      prepareWebpackRuleConfig(userConfig.webpack.rules);\n    }\n  }\n\n  checkForRedundantCompatAliases(userConfig.type, userConfig.webpack.aliases, 'webpack.aliases', report);\n\n  if (userConfig.webpack.extra) {\n    if (userConfig.webpack.extra.output && userConfig.webpack.extra.output.publicPath) {\n      report.hint('webpack.extra.output.publicPath', `You can use the more convenient ${_chalk2.default.green('webpack.publicPath')} instead.`);\n    }\n    if (userConfig.webpack.extra.resolve && userConfig.webpack.extra.resolve.alias) {\n      report.hint('webpack.extra.resolve.alias', `You can use the more convenient ${_chalk2.default.green('webpack.aliases')} instead.`);\n      checkForRedundantCompatAliases(userConfig.type, userConfig.webpack.extra.resolve.alias, 'webpack.extra.resolve.alias', report);\n    }\n  }\n\n  if (report.hasErrors()) {\n    throw new _errors.ConfigValidationError(report);\n  }\n  if (check) {\n    throw report;\n  }\n  if (report.hasSomethingToReport()) {\n    report.log();\n  }\n\n  (0, _debug2.default)('user config: %s', (0, _utils.deepToString)(userConfig));\n\n  return userConfig;\n}\n\n/**\n * Load a user config file and process it.\n */\nfunction getUserConfig() {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$check = options.check,\n      check = _options$check === undefined ? false : _options$check,\n      _options$required = options.required,\n      required = _options$required === undefined ? DEFAULT_REQUIRED : _options$required;\n  // Try to load default user config, or use a config file path we were given\n\n  var userConfig = {};\n  var userConfigPath = _path2.default.resolve(args.config || _constants.CONFIG_FILE_NAME);\n\n  // Bail early if a config file is required and doesn't exist\n  var configFileExists = _glob2.default.sync(userConfigPath).length !== 0;\n  if ((args.config || required) && !configFileExists) {\n    throw new Error(`Couldn't find a config file at ${userConfigPath}`);\n  }\n\n  // If a config file exists, it should be a valid module regardless of whether\n  // or not it's required.\n  if (configFileExists) {\n    try {\n      userConfig = require(userConfigPath);\n      (0, _debug2.default)('imported config module from %s', userConfigPath);\n      // Delete the file from the require cache as some builds need to import\n      // it multiple times with a different NODE_ENV in place.\n      delete require.cache[userConfigPath];\n    } catch (e) {\n      throw new Error(`Couldn't import the config file at ${userConfigPath}: ${e.message}\\n${e.stack}`);\n    }\n  }\n\n  return processUserConfig({ args, check, required, userConfig, userConfigPath });\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/errors.js":"'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * An error related to user input or configuration, or anything else the user is\n * responsible for and can fix.\n */\nvar UserError = exports.UserError = function UserError() {\n  _classCallCheck(this, UserError);\n\n  for (var _len = arguments.length, messages = Array(_len), _key = 0; _key < _len; _key++) {\n    messages[_key] = arguments[_key];\n  }\n\n  this.message = messages.join('\\n');\n};\n\nvar KarmaExitCodeError = exports.KarmaExitCodeError = function KarmaExitCodeError(exitCode) {\n  _classCallCheck(this, KarmaExitCodeError);\n\n  this.exitCode = exitCode;\n};\n\nvar ConfigValidationError = exports.ConfigValidationError = function ConfigValidationError(report) {\n  _classCallCheck(this, ConfigValidationError);\n\n  this.report = report;\n};","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/appConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.getDefaultHTMLConfig = getDefaultHTMLConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEFAULT_HTML_PATH = 'src/index.html';\n\nfunction getDefaultHTMLConfig() {\n  var cwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n\n  // Use the default HTML template path if it exists\n  if (_glob2.default.sync(DEFAULT_HTML_PATH, { cwd }).length > 0) {\n    return {\n      template: DEFAULT_HTML_PATH\n    };\n  }\n  // Otherwise provide default variables for the internal template, in case we\n  // fall back to it.\n  return {\n    mountId: 'app',\n    title: require(_path2.default.join(cwd, 'package.json')).name\n  };\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createKarmaConfig.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.processPluginConfig = processPluginConfig;\nexports.findPlugin = findPlugin;\nexports.getKarmaPluginConfig = getKarmaPluginConfig;\nexports.default = createKarmaConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _createWebpackConfig = require('./createWebpackConfig');\n\nvar _createWebpackConfig2 = _interopRequireDefault(_createWebpackConfig);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _getPluginConfig = require('./getPluginConfig');\n\nvar _getPluginConfig2 = _interopRequireDefault(_getPluginConfig);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The following defaults are combined into a single extglob-style pattern to\n// avoid generating \"pattern ... does not match any file\" warnings.\n\n// Exclude top-level test dirs and __tests__ dirs under src/ from code coverage\n// by default.\nvar DEFAULT_EXCLUDE_FROM_COVERAGE = ['test/', 'tests/', 'src/**/__tests__/'];\n// Not every file in a test directory is a test and tests may also be co-located\n// with the code they test, so determine test files by suffix.\nvar DEFAULT_TEST_FILES = ['+(src|test?(s))/**/*+(-test|.spec|.test).js'];\n\n/**\n * Browser, framework and reporter config can be passed as strings or as plugin\n * objects. This handles figuring out which names and plugins have been provided\n * and automatically extracting the first browser/framework/reporter name from a\n * plugin object.\n */\nfunction processPluginConfig(configs) {\n  var names = [];\n  var plugins = [];\n  configs.forEach(function (config) {\n    if ((0, _utils.typeOf)(config) === 'string') {\n      names.push(config);\n    } else {\n      names.push(Object.keys(config)[0].split(':').pop());\n      plugins.push(config);\n    }\n  });\n  return [names, plugins];\n}\n\n/**\n * Finds a karma plugin with the given type:name id. If a plugin object contains\n * multiple plugins (e.g. karma-chai-plugins), only the first will be checked.\n */\nfunction findPlugin(plugins, findId) {\n  for (var i = 0, l = plugins.length; i < l; i++) {\n    if ((0, _utils.typeOf)(plugins[i]) !== 'object') {\n      continue;\n    }\n    if (Object.keys(plugins[i])[0] === findId) {\n      return plugins[i];\n    }\n  }\n  return null;\n}\n\n/**\n * Handles creation of Karma config based on Karma plugins.\n */\nfunction getKarmaPluginConfig() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$codeCoverage = _ref.codeCoverage,\n      codeCoverage = _ref$codeCoverage === undefined ? false : _ref$codeCoverage,\n      _ref$userConfig = _ref.userConfig,\n      userConfig = _ref$userConfig === undefined ? {} : _ref$userConfig;\n\n  var browsers = ['PhantomJS'];\n  var frameworks = ['mocha'];\n  var plugins = [require('karma-sourcemap-loader'), require('karma-webpack')];\n  // Default reporter if the user configure their own frameworks\n  var reporters = ['dots'];\n\n  // Browsers, frameworks and reporters can be configured as a list containing\n  // names of bundled plugins, or plugin objects.\n  if (userConfig.browsers) {\n    var _processPluginConfig = processPluginConfig(userConfig.browsers),\n        browserNames = _processPluginConfig[0],\n        browserPlugins = _processPluginConfig[1];\n\n    browsers = browserNames;\n    plugins = plugins.concat(browserPlugins);\n  }\n\n  if (userConfig.frameworks) {\n    var _processPluginConfig2 = processPluginConfig(userConfig.frameworks),\n        frameworkNames = _processPluginConfig2[0],\n        frameworkPlugins = _processPluginConfig2[1];\n\n    frameworks = frameworkNames;\n    plugins = plugins.concat(frameworkPlugins);\n  } else {\n    // Use the Mocha reporter by default if the user didn't configure frameworks\n    reporters = ['mocha'];\n  }\n\n  if (userConfig.reporters) {\n    var _processPluginConfig3 = processPluginConfig(userConfig.reporters),\n        reporterNames = _processPluginConfig3[0],\n        reporterPlugins = _processPluginConfig3[1];\n\n    reporters = reporterNames;\n    plugins = plugins.concat(reporterPlugins);\n  }\n\n  // Plugins can be provided as a list of imported plugin objects\n  if (userConfig.plugins) {\n    plugins = plugins.concat(userConfig.plugins);\n  }\n\n  // Ensure nwb's version of plugins get loaded if they're going to be used and =\n  // haven't been provided by the user.\n  if (frameworks.indexOf('mocha') !== -1 && !findPlugin(plugins, 'framework:mocha')) {\n    plugins.push(require('karma-mocha'));\n  }\n  if (reporters.indexOf('mocha') !== -1 && !findPlugin(plugins, 'reporter:mocha')) {\n    plugins.push(require('karma-mocha-reporter'));\n  }\n  if (browsers.indexOf('PhantomJS') !== -1 && !findPlugin(plugins, 'launcher:PhantomJS')) {\n    plugins.push(require('karma-phantomjs-launcher'));\n  }\n  if (browsers.indexOf('Chrome') !== -1 && !findPlugin(plugins, 'launcher:Chrome')) {\n    plugins.push(require('karma-chrome-launcher'));\n  }\n\n  if (codeCoverage) {\n    plugins.push(require('karma-coverage'));\n    reporters.push('coverage');\n  }\n\n  return { browsers, frameworks, plugins, reporters };\n}\n\nfunction createKarmaConfig(args, buildConfig, userConfig) {\n  var isCi = process.env.CI || process.env.CONTINUOUS_INTEGRATION;\n  var codeCoverage = isCi || !!args.coverage;\n\n  var userKarma = userConfig.karma || {};\n\n  var _getKarmaPluginConfig = getKarmaPluginConfig({\n    codeCoverage,\n    userConfig: userKarma\n  }),\n      browsers = _getKarmaPluginConfig.browsers,\n      frameworks = _getKarmaPluginConfig.frameworks,\n      plugins = _getKarmaPluginConfig.plugins,\n      reporters = _getKarmaPluginConfig.reporters;\n\n  var _userKarma$excludeFro = userKarma.excludeFromCoverage,\n      excludeFromCoverage = _userKarma$excludeFro === undefined ? DEFAULT_EXCLUDE_FROM_COVERAGE : _userKarma$excludeFro;\n\n  if ((0, _utils.typeOf)(excludeFromCoverage) === 'string') excludeFromCoverage = [excludeFromCoverage];\n  var testFiles = userKarma.testFiles || DEFAULT_TEST_FILES;\n  if ((0, _utils.typeOf)(testFiles) === 'string') testFiles = [testFiles];\n\n  // Polyfill by default for browsers which lack features (hello PhantomJS)\n  var files = [require.resolve('babel-polyfill/dist/polyfill.js')];\n  var preprocessors = {};\n\n  if (userKarma.testContext) {\n    files.push(userKarma.testContext);\n    preprocessors[userKarma.testContext] = ['webpack', 'sourcemap'];\n  } else {\n    testFiles.forEach(function (testGlob) {\n      files.push(testGlob);\n      preprocessors[testGlob] = ['webpack', 'sourcemap'];\n    });\n  }\n\n  // Tweak Babel config for code coverage when necessary\n  buildConfig = _extends({}, buildConfig);\n  if (!buildConfig.babel) {\n    buildConfig.babel = {};\n  }\n  if (codeCoverage) {\n    var exclude = ['node_modules/'].concat(excludeFromCoverage, testFiles);\n    if (userKarma.testContext) {\n      exclude.push(userKarma.testContext);\n    }\n    buildConfig.babel.plugins = [[require.resolve('babel-plugin-istanbul'), { exclude }]];\n  }\n\n  var karmaConfig = (0, _webpackMerge2.default)({\n    browsers,\n    coverageReporter: {\n      dir: _path2.default.resolve('coverage'),\n      reporters: [{ type: 'html', subdir: 'html' }, { type: 'lcovonly', subdir: '.' }, { type: 'text-summary' }]\n    },\n    files,\n    frameworks,\n    mochaReporter: {\n      showDiff: true\n    },\n    plugins,\n    preprocessors,\n    reporters,\n    singleRun: isCi || !args.server,\n    webpack: (0, _createWebpackConfig2.default)((0, _webpackMerge2.default)(buildConfig, {\n      devtool: 'cheap-module-inline-source-map',\n      node: {\n        fs: 'empty'\n      },\n      plugins: {\n        status: {\n          test: true\n        }\n      },\n      resolve: {\n        alias: {\n          expect: _path2.default.dirname(require.resolve('expect/package')),\n          src: _path2.default.resolve('src')\n        }\n      },\n      server: {\n        hot: false\n      }\n    }), (0, _getPluginConfig2.default)(), userConfig),\n    webpackMiddleware: {\n      noInfo: true,\n      quiet: true\n    }\n  }, userKarma.extra);\n\n  (0, _debug2.default)('karma config: %s', (0, _utils.deepToString)(karmaConfig));\n  return karmaConfig;\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createProject.js":"'use strict';\n\nexports.__esModule = true;\nexports.getNpmModulePrefs = getNpmModulePrefs;\nexports.validateProjectType = validateProjectType;\nexports.default = createProject;\n\nvar _child_process = require('child_process');\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _copyTemplateDir = require('copy-template-dir');\n\nvar _copyTemplateDir2 = _interopRequireDefault(_copyTemplateDir);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nvar _ora = require('ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nvar _runSeries = require('run-series');\n\nvar _runSeries2 = _interopRequireDefault(_runSeries);\n\nvar _constants = require('./constants');\n\nvar _errors = require('./errors');\n\nvar _package = require('../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO Change if >= 1.0.0 ever happens\nvar NWB_VERSION = _package2.default.version.split('.').slice(0, 2).concat('x').join('.');\n\n/**\n * Copy a project template and log created files if successful.\n */\nfunction copyTemplate(templateDir, targetDir, templateVars, cb) {\n  (0, _copyTemplateDir2.default)(templateDir, targetDir, templateVars, function (err, createdFiles) {\n    if (err) return cb(err);\n    createdFiles.sort().forEach(function (createdFile) {\n      var relativePath = _path2.default.relative(targetDir, createdFile);\n      console.log(`  ${_chalk2.default.green('create')} ${relativePath}`);\n    });\n    cb();\n  });\n}\n\n/**\n * Prompt the user for preferences related to publishing a module to npm, unless\n * they've asked us not to or have already provided all the possible options via\n * arguments.\n */\nfunction getNpmModulePrefs(args, cb) {\n  // An ES6 modules build is enabled by default, but can be disabled with\n  // --no-es-modules or --es-modules=false (or a bunch of other undocumented\n  // stuff)\n  var esModules = args['es-modules'] !== false && !/^(0|false|no|nope|off)$/.test(args['es-modules']);\n  // Pass a UMD global variable name with --umd=MyThing, or pass --no-umd to\n  // indicate you don't want a UMD build.\n  var umd = (0, _utils.typeOf)(args.umd) === 'string' ? args.umd : false;\n\n  // Don't ask questions if the user doesn't want them, or already told us all\n  // the answers.\n  if (args.f || args.force || 'umd' in args && 'es-modules' in args) {\n    return process.nextTick(cb, null, { umd, esModules });\n  }\n\n  _inquirer2.default.prompt([{\n    when: function when() {\n      return !('es-modules' in args);\n    },\n    type: 'confirm',\n    name: 'esModules',\n    message: 'Do you want to create an ES6 modules build for use by ES6 bundlers?',\n    default: esModules\n  }, {\n    when: function when() {\n      return !('umd' in args);\n    },\n    type: 'confirm',\n    name: 'createUMD',\n    message: 'Do you want to create a UMD build for global usage via <script> tag?',\n    default: umd\n  }, {\n    when: function when(_ref) {\n      var createUMD = _ref.createUMD;\n      return createUMD;\n    },\n    type: 'input',\n    name: 'umd',\n    message: 'Which global variable should the UMD build set?',\n    validate(input) {\n      return input.trim() ? true : 'Required to create a UMD build';\n    },\n    default: umd || ''\n  }]).then(function (answers) {\n    return cb(null, answers);\n  }, function (err) {\n    return cb(err);\n  });\n}\n\n/**\n * Initialise a Git repository if the user has Git, unless there's already one\n * present or the user has asked us could we not.\n */\nfunction initGit(args, cwd, cb) {\n  // Allow git init to be disabled with a --no-git flag\n  if (args.git === false) {\n    return process.nextTick(cb);\n  }\n  // Bail if a git repo already exists (e.g. nwb init in an existing repo)\n  if (_glob2.default.sync('.git/', { cwd }).length > 0) {\n    return process.nextTick(cb);\n  }\n\n  (0, _child_process.exec)('git --version', { cwd, stdio: 'ignore' }, function (err) {\n    if (err) return cb();\n    var spinner = (0, _ora2.default)('Initing Git repo').start();\n    (0, _runSeries2.default)([function (cb) {\n      return (0, _child_process.exec)('git init', { cwd }, cb);\n    }, function (cb) {\n      return (0, _child_process.exec)('git add .', { cwd }, cb);\n    }, function (cb) {\n      return (0, _child_process.exec)(`git commit -m \"Initial commit from nwb v${_package2.default.version}\"`, { cwd }, cb);\n    }], function (err) {\n      if (err) {\n        spinner.fail();\n        console.log(_chalk2.default.red(err.message));\n        return cb();\n      }\n      spinner.succeed();\n      cb();\n    });\n  });\n}\n\n/**\n * Validate a user-supplied project type.\n */\nfunction validateProjectType(projectType) {\n  if (!projectType) {\n    throw new _errors.UserError(`A project type must be provided, one of: ${[].concat(_constants.PROJECT_TYPES).join(', ')}`);\n  }\n  if (!_constants.PROJECT_TYPES.has(projectType)) {\n    throw new _errors.UserError(`Project type must be one of: ${[].concat(_constants.PROJECT_TYPES).join(', ')}`);\n  }\n}\n\n/**\n * Write an nwb config file.\n */\nfunction writeConfigFile(dir, config, cb) {\n  _fs2.default.writeFile(_path2.default.join(dir, _constants.CONFIG_FILE_NAME), `module.exports = ${(0, _utils.toSource)(config)}\\n`, cb);\n}\n\nvar APP_PROJECT_CONFIG = {\n  [_constants.INFERNO_APP]: {\n    dependencies: ['inferno', 'inferno-component', 'inferno-compat']\n  },\n  [_constants.PREACT_APP]: {\n    dependencies: ['preact', 'preact-compat']\n  },\n  [_constants.REACT_APP]: {\n    dependencies: ['react', 'react-dom']\n  },\n  [_constants.WEB_APP]: {}\n};\n\nvar MODULE_PROJECT_CONFIG = {\n  [_constants.REACT_COMPONENT]: {\n    devDependencies: ['react', 'react-dom'],\n    externals: { react: 'React' }\n  },\n  [_constants.WEB_MODULE]: {}\n};\n\n/**\n * Create an app project skeleton.\n */\nfunction createAppProject(args, projectType, name, targetDir, cb) {\n  var _APP_PROJECT_CONFIG$p = APP_PROJECT_CONFIG[projectType].dependencies,\n      dependencies = _APP_PROJECT_CONFIG$p === undefined ? [] : _APP_PROJECT_CONFIG$p;\n\n  if (dependencies.length !== 0) {\n    (function () {\n      var library = projectType.split('-')[0];\n      if (args[library]) {\n        dependencies = dependencies.map(function (pkg) {\n          return `${pkg}@${args[library]}`;\n        });\n      }\n    })();\n  }\n  var templateDir = _path2.default.join(__dirname, `../templates/${projectType}`);\n  var templateVars = { name, nwbVersion: NWB_VERSION };\n  (0, _runSeries2.default)([function (cb) {\n    return copyTemplate(templateDir, targetDir, templateVars, cb);\n  }, function (cb) {\n    return (0, _utils.install)(dependencies, { cwd: targetDir, save: true }, cb);\n  }, function (cb) {\n    return initGit(args, targetDir, cb);\n  }], cb);\n}\n\n/**\n * Create an npm module project skeleton.\n */\nfunction createModuleProject(args, projectType, name, targetDir, cb) {\n  var _MODULE_PROJECT_CONFI = MODULE_PROJECT_CONFIG[projectType],\n      _MODULE_PROJECT_CONFI2 = _MODULE_PROJECT_CONFI.devDependencies,\n      devDependencies = _MODULE_PROJECT_CONFI2 === undefined ? [] : _MODULE_PROJECT_CONFI2,\n      _MODULE_PROJECT_CONFI3 = _MODULE_PROJECT_CONFI.externals,\n      externals = _MODULE_PROJECT_CONFI3 === undefined ? {} : _MODULE_PROJECT_CONFI3;\n\n  getNpmModulePrefs(args, function (err, prefs) {\n    if (err) return cb(err);\n    var umd = prefs.umd,\n        esModules = prefs.esModules;\n\n    var templateDir = _path2.default.join(__dirname, `../templates/${projectType}`);\n    var templateVars = {\n      name,\n      esModules,\n      esModulesPackageConfig: esModules ? '\\n  \"module\": \"es/index.js\",' : '',\n      nwbVersion: NWB_VERSION\n    };\n    var nwbConfig = {\n      type: projectType,\n      npm: {\n        esModules,\n        umd: umd ? { global: umd, externals } : false\n      }\n    };\n\n    // CBA making this part generic until it's needed\n    if (projectType === _constants.REACT_COMPONENT) {\n      if (args.react) {\n        devDependencies = devDependencies.map(function (pkg) {\n          return `${pkg}@${args.react}`;\n        });\n        templateVars.reactPeerVersion = `^${args.react}`; // YOLO\n      } else {\n        // TODO Get from npm so we don't have to manually update on major releases\n        templateVars.reactPeerVersion = '15.x';\n      }\n    }\n\n    (0, _runSeries2.default)([function (cb) {\n      return copyTemplate(templateDir, targetDir, templateVars, cb);\n    }, function (cb) {\n      return writeConfigFile(targetDir, nwbConfig, cb);\n    }, function (cb) {\n      return (0, _utils.install)(devDependencies, { cwd: targetDir, save: true, dev: true }, cb);\n    }, function (cb) {\n      return initGit(args, targetDir, cb);\n    }], cb);\n  });\n}\n\nfunction createProject(args, type, name, dir, cb) {\n  if (type in APP_PROJECT_CONFIG) {\n    return createAppProject(args, type, name, dir, cb);\n  } else {\n    createModuleProject(args, type, name, dir, cb);\n  }\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createServeInfernoAppConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = createServeInfernoAppConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _appConfig = require('./appConfig');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createServeInfernoAppConfig(args, overrides) {\n  var entry = _path2.default.resolve(args._[1] || 'src/index.js');\n  var dist = _path2.default.resolve(args._[2] || 'dist');\n\n  var config = {\n    babel: {\n      presets: ['inferno']\n    },\n    entry: [_path2.default.resolve(entry)],\n    output: {\n      path: _path2.default.resolve(dist),\n      filename: 'app.js',\n      publicPath: '/'\n    },\n    plugins: {\n      html: (0, _appConfig.getDefaultHTMLConfig)()\n    },\n    resolve: {\n      alias: {\n        'react': 'inferno-compat',\n        'react-dom': 'inferno-compat'\n      }\n    }\n  };\n\n  if (_glob2.default.sync('public/').length !== 0) {\n    config.plugins.copy = [{ from: _path2.default.resolve('public'), to: dist, ignore: '.gitkeep' }];\n  }\n\n  return (0, _webpackMerge2.default)(config, overrides);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createServePreactAppConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = createServePreactAppConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _appConfig = require('./appConfig');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createServePreactAppConfig(args, overrides) {\n  var entry = _path2.default.resolve(args._[1] || 'src/index.js');\n  var dist = _path2.default.resolve(args._[2] || 'dist');\n\n  var config = {\n    babel: {\n      presets: ['preact']\n    },\n    entry: [_path2.default.resolve(entry)],\n    output: {\n      path: _path2.default.resolve(dist),\n      filename: 'app.js',\n      publicPath: '/'\n    },\n    plugins: {\n      html: (0, _appConfig.getDefaultHTMLConfig)()\n    },\n    resolve: {\n      alias: {\n        'react': 'preact-compat/dist/preact-compat',\n        'react-dom': 'preact-compat/dist/preact-compat'\n      }\n    }\n  };\n\n  if (_glob2.default.sync('public/').length !== 0) {\n    config.plugins.copy = [{ from: _path2.default.resolve('public'), to: dist, ignore: '.gitkeep' }];\n  }\n\n  return (0, _webpackMerge2.default)(config, overrides);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createServeReactAppConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = createServeReactAppConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _appConfig = require('./appConfig');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createServeReactAppConfig(args, overrides) {\n  var entry = _path2.default.resolve(args._[1] || 'src/index.js');\n  var dist = _path2.default.resolve(args._[2] || 'dist');\n\n  var config = {\n    babel: {\n      presets: ['react', 'react-hmre']\n    },\n    entry: [_path2.default.resolve(entry)],\n    output: {\n      path: _path2.default.resolve(dist),\n      filename: 'app.js',\n      publicPath: '/'\n    },\n    plugins: {\n      html: (0, _appConfig.getDefaultHTMLConfig)()\n    }\n  };\n\n  if (_glob2.default.sync('public/').length !== 0) {\n    config.plugins.copy = [{ from: _path2.default.resolve('public'), to: dist, ignore: '.gitkeep' }];\n  }\n\n  return (0, _webpackMerge2.default)(config, overrides);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/createServeWebAppConfig.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = createServeWebAppConfig;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _appConfig = require('./appConfig');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createServeWebAppConfig(args, overrides) {\n  var entry = _path2.default.resolve(args._[1] || 'src/index.js');\n  var dist = _path2.default.resolve(args._[2] || 'dist');\n\n  var config = {\n    entry: [_path2.default.resolve(entry)],\n    output: {\n      path: _path2.default.resolve(dist),\n      filename: 'app.js',\n      publicPath: '/'\n    },\n    plugins: {\n      html: (0, _appConfig.getDefaultHTMLConfig)()\n    }\n  };\n\n  if (_glob2.default.sync('public/').length !== 0) {\n    config.plugins.copy = [{ from: _path2.default.resolve('public'), to: dist, ignore: '.gitkeep' }];\n  }\n\n  return (0, _webpackMerge2.default)(config, overrides);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/devServer.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = server;\n\nvar _connectHistoryApiFallback = require('connect-history-api-fallback');\n\nvar _connectHistoryApiFallback2 = _interopRequireDefault(_connectHistoryApiFallback);\n\nvar _express = require('express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _webpack = require('webpack');\n\nvar _webpack2 = _interopRequireDefault(_webpack);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Start an Express server which uses webpack-dev-middleware to build and serve\n * assets using Webpack's watch mode, and webpack-hot-middleware to hot reload\n * changes in the browser and display compile error overlays.\n *\n * Static content is handled by CopyPlugin.\n */\nfunction server(webpackConfig, _ref, cb) {\n  var fallback = _ref.fallback,\n      host = _ref.host,\n      port = _ref.port,\n      staticPath = _ref.staticPath;\n\n  var app = (0, _express2.default)();\n  var compiler = (0, _webpack2.default)(webpackConfig);\n\n  if (fallback !== false) {\n    app.use((0, _connectHistoryApiFallback2.default)());\n  }\n\n  app.use(require('webpack-dev-middleware')(compiler, {\n    noInfo: true,\n    publicPath: webpackConfig.output.publicPath,\n    quiet: true,\n    watchOptions: {\n      ignored: /node_modules/\n    }\n  }));\n\n  app.use(require('webpack-hot-middleware')(compiler, {\n    log: false\n  }));\n\n  function onServerStart(err) {\n    if (err) return cb(err);\n  }\n\n  // Only provide host config if it was explicitly specified by the user\n  if (host) {\n    app.listen(port, host, onServerStart);\n  } else {\n    app.listen(port, onServerStart);\n  }\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/infernoRunEntry.js":"'use strict';\n\n/* global NWB_INFERNO_RUN_MOUNT_ID */\n\nvar Inferno = require('inferno');\nvar createVNode = Inferno.createVNode,\n    render = Inferno.render;\n\nvar parent = document.getElementById(NWB_INFERNO_RUN_MOUNT_ID);\nvar vnode = null;\n\nfunction renderEntry(exported) {\n  if (exported.default) {\n    exported = exported.default;\n  }\n  // Assumptions: the entry module either renders the app itself or exports an\n  // Inferno component (which is either a function or class) or VNode (which has\n  // a flags property).\n  if (Object.prototype.toString.call(exported) === '[object Function]') {\n    vnode = createVNode(1 << 4 /* === VNodeFlags.ComponentUnknown */, exported);\n  } else if (exported.flags) {\n    vnode = exported;\n  }\n  render(vnode, parent);\n}\n\nfunction init() {\n  // Hijack any inline render() from the entry module, but only the first one -\n  // others may be from components like portals which need to render() their\n  // contents.\n  Inferno.render = function (v) {\n    vnode = v;\n    Inferno.render = render;\n  };\n  var entry = require('nwb-inferno-run-entry');\n  Inferno.render = render;\n  renderEntry(entry);\n}\n\nif (module.hot) {\n  module.hot.accept('nwb-inferno-run-entry', init);\n}\n\ninit();","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/karmaServer.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = karmaServer;\n\nvar _karma = require('karma');\n\nvar _createKarmaConfig = require('./createKarmaConfig');\n\nvar _createKarmaConfig2 = _interopRequireDefault(_createKarmaConfig);\n\nvar _errors = require('./errors');\n\nvar _getUserConfig = require('./getUserConfig');\n\nvar _getUserConfig2 = _interopRequireDefault(_getUserConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction karmaServer(args, buildConfig, cb) {\n  // Force the environment to test\n  process.env.NODE_ENV = 'test';\n\n  var userConfig = (0, _getUserConfig2.default)(args);\n  var karmaConfig = (0, _createKarmaConfig2.default)(args, buildConfig, userConfig);\n\n  new _karma.Server(karmaConfig, function (exitCode) {\n    if (exitCode !== 0) return cb(new _errors.KarmaExitCodeError(exitCode));\n    cb();\n  }).start();\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/moduleBuild.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = moduleBuild;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _crossSpawn = require('cross-spawn');\n\nvar _crossSpawn2 = _interopRequireDefault(_crossSpawn);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _ora = require('ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nvar _runSeries = require('run-series');\n\nvar _runSeries2 = _interopRequireDefault(_runSeries);\n\nvar _webpackMerge = require('webpack-merge');\n\nvar _webpackMerge2 = _interopRequireDefault(_webpackMerge);\n\nvar _cleanModule = require('./commands/clean-module');\n\nvar _cleanModule2 = _interopRequireDefault(_cleanModule);\n\nvar _createBabelConfig = require('./createBabelConfig');\n\nvar _createBabelConfig2 = _interopRequireDefault(_createBabelConfig);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _errors = require('./errors');\n\nvar _getUserConfig = require('./getUserConfig');\n\nvar _getUserConfig2 = _interopRequireDefault(_getUserConfig);\n\nvar _utils = require('./utils');\n\nvar _webpackBuild = require('./webpackBuild');\n\nvar _webpackBuild2 = _interopRequireDefault(_webpackBuild);\n\nvar _webpackUtils = require('./webpackUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// These match DEFAULT_TEST_DIRS and DEFAULT_TEST_FILES for co-located tests in\n// ./createKarmaConfig.js; unfortunately Babel doesn't seem to support reusing\n// the same patterns.\nvar DEFAULT_BABEL_IGNORE_CONFIG = ['.spec.js', '.test.js', '-test.js', '/__tests__/'];\n\n/**\n * Run Babel with generated config written to a temporary .babelrc.\n */\nfunction runBabel(name, _ref, buildBabelConfig, userBabelConfig, cb) {\n  var copyFiles = _ref.copyFiles,\n      outDir = _ref.outDir,\n      src = _ref.src;\n\n  var babelConfig = (0, _createBabelConfig2.default)(buildBabelConfig, userBabelConfig);\n  babelConfig.ignore = DEFAULT_BABEL_IGNORE_CONFIG;\n\n  (0, _debug2.default)('babel config: %s', (0, _utils.deepToString)(babelConfig));\n\n  var args = [src, '--out-dir', outDir, '--quiet'];\n  if (copyFiles) {\n    args.push('--copy-files');\n  }\n\n  _fs2.default.writeFile('.babelrc', JSON.stringify(babelConfig, null, 2), function (err) {\n    if (err) return cb(err);\n    var spinner = (0, _ora2.default)(`Creating ${name} build`).start();\n    var babel = (0, _crossSpawn2.default)(require.resolve('.bin/babel'), args, { stdio: 'inherit' });\n    babel.on('exit', function (code) {\n      var babelError = void 0;\n      if (code !== 0) {\n        spinner.fail();\n        babelError = new Error('Babel transpilation failed');\n      } else {\n        spinner.succeed();\n      }\n      _fs2.default.unlink('.babelrc', function (unlinkError) {\n        cb(babelError || unlinkError);\n      });\n    });\n  });\n}\n\n/**\n * Create development and production UMD builds for <script> tag usage.\n */\nfunction buildUMD(args, buildConfig, userConfig, cb) {\n  var spinner = (0, _ora2.default)('Creating UMD builds').start();\n\n  var pkg = require(_path2.default.resolve('package.json'));\n  var entry = _path2.default.resolve(args._[1] || 'src/index.js');\n  var webpackBuildConfig = {\n    babel: buildConfig.babel,\n    entry: [entry],\n    output: {\n      filename: `${pkg.name}.js`,\n      library: userConfig.npm.umd.global,\n      libraryTarget: 'umd',\n      path: _path2.default.resolve('umd')\n    },\n    externals: (0, _webpackUtils.createExternals)(userConfig.npm.umd.externals),\n    polyfill: false,\n    plugins: {\n      banner: (0, _webpackUtils.createBanner)(pkg)\n    }\n  };\n\n  process.env.NODE_ENV = 'development';\n  (0, _webpackBuild2.default)(null, args, webpackBuildConfig, function (err, stats1) {\n    if (err) {\n      spinner.fail();\n      return cb(err);\n    }\n    process.env.NODE_ENV = 'production';\n    webpackBuildConfig.babel = (0, _webpackMerge2.default)(buildConfig.babel, buildConfig.babelProd || {});\n    webpackBuildConfig.devtool = 'source-map';\n    webpackBuildConfig.output.filename = `${pkg.name}.min.js`;\n    (0, _webpackBuild2.default)(null, args, webpackBuildConfig, function (err, stats2) {\n      if (err) {\n        spinner.fail();\n        return cb(err);\n      }\n      spinner.succeed();\n      console.log();\n      (0, _webpackUtils.logGzippedFileSizes)(stats1, stats2);\n      cb();\n    });\n  });\n}\n\nfunction moduleBuild(args) {\n  var buildConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var cb = arguments[2];\n\n  // XXX Babel doesn't support passing the path to a babelrc file any more\n  if (_glob2.default.sync('.babelrc').length > 0) {\n    throw new _errors.UserError('Unable to build the module as there is a .babelrc in your project', 'nwb needs to write a temporary .babelrc to configure the build');\n  }\n\n  var src = _path2.default.resolve('src');\n  var userConfig = (0, _getUserConfig2.default)(args);\n  var copyFiles = !!args['copy-files'];\n\n  var tasks = [function (cb) {\n    return (0, _cleanModule2.default)(args, cb);\n  }, function (cb) {\n    return runBabel('ES5', { copyFiles, outDir: _path2.default.resolve('lib'), src }, (0, _webpackMerge2.default)(buildConfig.babel, buildConfig.babelDev || {}, {\n      // Don't force ES5 users of the ES5 build to eat a .require\n      commonJSInterop: true,\n      // Transpile modules to CommonJS for ES5 users\n      modules: 'commonjs',\n      // Don't set the path to nwb's babel-runtime, as it will need to be a\n      // peerDependency of your module if you use transform-runtime's helpers\n      // option.\n      setRuntimePath: false,\n      // Don't enable webpack-specific plugins\n      webpack: false\n    }), userConfig.babel, cb);\n  }];\n\n  // The ES6 modules build is enabled by default, and must be explicitly\n  // disabled if you don't want it.\n  if (userConfig.npm.esModules !== false) {\n    tasks.push(function (cb) {\n      return runBabel('ES6 modules', { copyFiles, outDir: _path2.default.resolve('es'), src }, (0, _webpackMerge2.default)(buildConfig.babel, buildConfig.babelDev || {}, {\n        // Don't set the path to nwb's babel-runtime, as it will need to be a\n        // peerDependency of your module if you use transform-runtime's helpers\n        // option.\n        setRuntimePath: false,\n        // Don't enable webpack-specific plugins\n        webpack: false\n      }), userConfig.babel, cb);\n    });\n  }\n\n  // The UMD build must be explicitly enabled\n  if (userConfig.npm.umd) {\n    tasks.push(function (cb) {\n      return buildUMD(args, buildConfig, userConfig, cb);\n    });\n  }\n\n  (0, _runSeries2.default)(tasks, cb);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/commands/clean-module.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = cleanModule;\n\nvar _utils = require('../utils');\n\nfunction cleanModule(args, cb) {\n  (0, _utils.clean)('module', ['coverage', 'es', 'lib', 'umd'], cb);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/webpackBuild.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = webpackBuild;\n\nvar _ora = require('ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nvar _webpack = require('webpack');\n\nvar _webpack2 = _interopRequireDefault(_webpack);\n\nvar _createWebpackConfig = require('./createWebpackConfig');\n\nvar _createWebpackConfig2 = _interopRequireDefault(_createWebpackConfig);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _getPluginConfig = require('./getPluginConfig');\n\nvar _getPluginConfig2 = _interopRequireDefault(_getPluginConfig);\n\nvar _getUserConfig = require('./getUserConfig');\n\nvar _getUserConfig2 = _interopRequireDefault(_getUserConfig);\n\nvar _utils = require('./utils');\n\nvar _webpackUtils = require('./webpackUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * If you pass a non-falsy name, this will handle spinner display and output\n * logging itself, otherwise use the stats provided in the callback.\n */\nfunction webpackBuild(name, args, buildConfig, cb) {\n  if (!process.env.NODE_ENV) {\n    process.env.NODE_ENV = 'production';\n  }\n\n  var userConfig = (0, _getUserConfig2.default)(args);\n  var pluginConfig = (0, _getPluginConfig2.default)({ args });\n  if (typeof buildConfig == 'function') {\n    buildConfig = buildConfig(args);\n  }\n\n  var webpackConfig = (0, _createWebpackConfig2.default)(buildConfig, pluginConfig, userConfig);\n\n  (0, _debug2.default)('webpack config: %s', (0, _utils.deepToString)(webpackConfig));\n\n  var spinner = void 0;\n  if (name) {\n    spinner = (0, _ora2.default)(`Building ${name}`).start();\n  }\n  var compiler = (0, _webpack2.default)(webpackConfig);\n  compiler.run(function (err, stats) {\n    if (err) {\n      if (spinner) {\n        spinner.fail();\n      }\n      return cb(err);\n    }\n    if (spinner) {\n      (0, _webpackUtils.logBuildResults)(stats, spinner);\n    }\n    cb(null, stats);\n  });\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/preactRunEntry.js":"'use strict';\n\n/* global NWB_PREACT_RUN_MOUNT_ID */\n\n// h/t to @developit for this render shim module\nvar Preact = require('preact');\nvar h = Preact.h,\n    render = Preact.render;\n\nvar parent = document.getElementById(NWB_PREACT_RUN_MOUNT_ID);\nvar root = parent.firstChild; // If #app already contains elements, hydrate from them (for SSR)\nvar vnode = null;\n\nfunction renderEntry(exported) {\n  if (exported.default) {\n    exported = exported.default;\n  }\n  // Assumptions: the entry module either renders the app itself or exports a\n  // Preact component (which is either a function or class) or VNode (which has\n  // a children property).\n  if (Object.prototype.toString.call(exported) === '[object Function]') {\n    vnode = h(exported);\n  } else if (exported.children) {\n    vnode = exported;\n  }\n  root = render(vnode, parent, root);\n}\n\nfunction init() {\n  // Hijack any inline render() from the entry module, but only the first one -\n  // others may be npm.im/preact-portal et al.\n  Preact.render = function (v) {\n    vnode = v;\n    Preact.render = render;\n  };\n  var entry = require('nwb-preact-run-entry');\n  Preact.render = render;\n  renderEntry(entry);\n}\n\nif (module.hot) {\n  module.hot.accept('nwb-preact-run-entry', init);\n}\n\ninit();","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/reactRunEntry.js":"'use strict';\n\nvar _react = require('react');\n\nvar _reactDom = require('react-dom');\n\n/* global NWB_REACT_RUN_MOUNT_ID */\n\nfunction renderEntry(exported) {\n  if (exported.default) {\n    exported = exported.default;\n  }\n  // Assumptions: the entry module either renders the app itself or exports a\n  // React component (which is either a function or class) or element (which has\n  // type and props properties).\n  var element = void 0;\n  if (Object.prototype.toString.call(exported) === '[object Function]') {\n    element = (0, _react.createElement)(exported);\n  } else if (exported.type && exported.props) {\n    element = exported;\n  }\n  if (element) {\n    (0, _reactDom.render)(element, document.getElementById(NWB_REACT_RUN_MOUNT_ID));\n  }\n}\n\nrenderEntry(require('nwb-react-run-entry'));\n\nif (module.hot) {\n  module.hot.accept('nwb-react-run-entry', function () {\n    renderEntry(require('nwb-react-run-entry'));\n  });\n}","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/lib/webpackServer.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = webpackServer;\n\nvar _chalk = require('chalk');\n\nvar _detectPort = require('detect-port');\n\nvar _detectPort2 = _interopRequireDefault(_detectPort);\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nvar _constants = require('./constants');\n\nvar _createServerWebpackConfig = require('./createServerWebpackConfig');\n\nvar _createServerWebpackConfig2 = _interopRequireDefault(_createServerWebpackConfig);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _devServer = require('./devServer');\n\nvar _devServer2 = _interopRequireDefault(_devServer);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Get the host and port to run the server on, detecting if the intended port\n * is available first and prompting the user if not.\n */\nfunction getServerOptions(args, cb) {\n  // Fallback index serving is enabled by default and must be explicitly enabled\n  var fallback = args.fallback !== false;\n  // The dev server handles defaulting the host by not providing it at all\n  var host = args.host;\n  var intendedPort = args.port || _constants.DEFAULT_PORT;\n\n  (0, _detectPort2.default)(intendedPort, function (err, suggestedPort) {\n    if (err) return cb(err);\n    if (suggestedPort === intendedPort) return cb(null, { fallback, host, port: intendedPort });\n    if (args.force) return cb(null, { fallback, host, port: suggestedPort });\n\n    (0, _utils.clearConsole)();\n    console.log((0, _chalk.yellow)(`Something is already running on port ${intendedPort}.`));\n    console.log();\n    _inquirer2.default.prompt([{\n      type: 'confirm',\n      name: 'run',\n      message: 'Would you like to run the app on another port instead?',\n      default: true\n    }]).then(function (_ref) {\n      var run = _ref.run;\n      return cb(null, run ? { fallback, host, port: suggestedPort } : null);\n    }, function (err) {\n      return cb(err);\n    });\n  });\n}\n\n/**\n * Start a development server with Webpack using a given build configuration.\n */\nfunction webpackServer(args, buildConfig, cb) {\n  // Default environment to development - we also run the dev server while\n  // testing to check that HMR works.\n  if (!process.env.NODE_ENV) {\n    process.env.NODE_ENV = 'development';\n  }\n\n  if (typeof buildConfig == 'function') {\n    buildConfig = buildConfig(args);\n  }\n\n  // Other config can be provided by the user via the CLI\n  getServerOptions(args, function (err, options) {\n    if (err) return cb(err);\n    if (options === null) return cb();\n\n    if (!('status' in buildConfig.plugins)) {\n      buildConfig.plugins.status = {\n        message: `The app is running at http://${options.host || 'localhost'}:${options.port}/`\n      };\n    }\n\n    var webpackConfig = (0, _createServerWebpackConfig2.default)(args, buildConfig);\n\n    (0, _debug2.default)('webpack config: %s', (0, _utils.deepToString)(webpackConfig));\n\n    (0, _devServer2.default)(webpackConfig, options, cb);\n  });\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-nwb/node_modules/nwb/polyfills.js":"// Ensure polyfill compatibility between create-react-app and zero-config nwb apps.\n// This is from https://github.com/facebookincubator/create-react-app/blob/master/config/polyfills.js\n\nif (typeof Promise === 'undefined') {\n  // Rejection tracking prevents a common issue where React gets into an\n  // inconsistent state due to an error, but it gets swallowed by a Promise,\n  // and the user has no idea what causes React's erratic future behaviour.\n  require('promise/lib/rejection-tracking').enable()\n  window.Promise = require('promise/lib/es6-extensions.js')\n}\n\n// fetch() polyfill for making API calls\nrequire('whatwg-fetch')\n\n// Object.assign() is commonly used with React.\n// It will use the native implementation if it's present and isn't buggy.\nObject.assign = require('object-assign')\n"}